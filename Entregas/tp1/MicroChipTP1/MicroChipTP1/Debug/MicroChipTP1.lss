
MicroChipTP1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000001f8  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000085b  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072a  00000000  00000000  00000b83  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031e  00000000  00000000  000012ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000015cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000403  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012f  00000000  00000000  00001a23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001b52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  8e:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <cambiar_secuencia>:
	0b01000000,
	0b10000000
};

void cambiar_secuencia(uint8_t* sec) {
	if (*sec == 1) {
  96:	fc 01       	movw	r30, r24
  98:	20 81       	ld	r18, Z
  9a:	21 30       	cpi	r18, 0x01	; 1
  9c:	19 f4       	brne	.+6      	; 0xa4 <cambiar_secuencia+0xe>
		*sec = 2;
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	20 83       	st	Z, r18
  a2:	08 95       	ret
	}
	else if (*sec == 2) {
  a4:	22 30       	cpi	r18, 0x02	; 2
  a6:	21 f4       	brne	.+8      	; 0xb0 <cambiar_secuencia+0x1a>
		*sec = 3;
  a8:	23 e0       	ldi	r18, 0x03	; 3
  aa:	fc 01       	movw	r30, r24
  ac:	20 83       	st	Z, r18
  ae:	08 95       	ret
	}
	else {
		*sec = 1;
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	fc 01       	movw	r30, r24
  b4:	20 83       	st	Z, r18
  b6:	08 95       	ret

000000b8 <mostrar_numero>:
	}
}

void mostrar_numero(uint8_t sec) {
	if (sec == 1) {
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	21 f4       	brne	.+8      	; 0xc4 <mostrar_numero+0xc>
		PORTB |= (1 << PORTB3);      // 01
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	85 b9       	out	0x05, r24	; 5
  c2:	08 95       	ret
	}
	else if (sec == 2) {
  c4:	82 30       	cpi	r24, 0x02	; 2
  c6:	21 f4       	brne	.+8      	; 0xd0 <mostrar_numero+0x18>
		PORTB |= (1 << PORTB4);      // 10
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	08 95       	ret
	}
	else {
		PORTB |= (1 << PORTB3) | (1 << PORTB4); // 11
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	08 95       	ret

000000d8 <main>:
	}
}

int main(void) {
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	1f 92       	push	r1
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
	uint8_t num_sec = 1;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	89 83       	std	Y+1, r24	; 0x01
	uint8_t i = 0;

	DDRD = 0xFF; // LEDs como salida
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << PORTB3) | (1 << PORTB4); // Salidas para mostrar el numero
  ea:	84 b1       	in	r24, 0x04	; 4
  ec:	88 61       	ori	r24, 0x18	; 24
  ee:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~((1 << PORTC0) | (1 << PORTC1)); // Entradas
  f0:	87 b1       	in	r24, 0x07	; 7
  f2:	8c 7f       	andi	r24, 0xFC	; 252
  f4:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC0) | (1 << PORTC1); // Pull-up internos
  f6:	88 b1       	in	r24, 0x08	; 8
  f8:	83 60       	ori	r24, 0x03	; 3
  fa:	88 b9       	out	0x08, r24	; 8
	}
}

int main(void) {
	uint8_t num_sec = 1;
	uint8_t i = 0;
  fc:	10 e0       	ldi	r17, 0x00	; 0
	DDRC &= ~((1 << PORTC0) | (1 << PORTC1)); // Entradas
	PORTC |= (1 << PORTC0) | (1 << PORTC1); // Pull-up internos

	while (1) {
		// Cambio de secuencia
		if (!(PINC & (1 << PINC0))){
  fe:	30 99       	sbic	0x06, 0	; 6
 100:	0b c0       	rjmp	.+22     	; 0x118 <main+0x40>
			cambiar_secuencia(&num_sec);
 102:	ce 01       	movw	r24, r28
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	0e 94 4b 00 	call	0x96	; 0x96 <cambiar_secuencia>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	8f e4       	ldi	r24, 0x4F	; 79
 10c:	93 ec       	ldi	r25, 0xC3	; 195
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0x36>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x3c>
 114:	00 00       	nop
			i = 0;
 116:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(200);
		}
		// Mostrar numero si se presiona PC1
		if (!(PINC & (1 << PINC1))) {
 118:	31 99       	sbic	0x06, 1	; 6
 11a:	04 c0       	rjmp	.+8      	; 0x124 <main+0x4c>
			mostrar_numero(num_sec);
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	0e 94 5c 00 	call	0xb8	; 0xb8 <mostrar_numero>
 122:	03 c0       	rjmp	.+6      	; 0x12a <main+0x52>
			} else {
			PORTB &= ~((1 << PORTB3) | (1 << PORTB4)); // Apagar indicadores
 124:	85 b1       	in	r24, 0x05	; 5
 126:	87 7e       	andi	r24, 0xE7	; 231
 128:	85 b9       	out	0x05, r24	; 5
		}
		if (num_sec == 1){
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	91 f4       	brne	.+36     	; 0x154 <main+0x7c>
			PORTD = sec_1[i];
 130:	81 2f       	mov	r24, r17
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	fc 01       	movw	r30, r24
 136:	e9 5e       	subi	r30, 0xE9	; 233
 138:	fe 4f       	sbci	r31, 0xFE	; 254
 13a:	20 81       	ld	r18, Z
 13c:	2b b9       	out	0x0b, r18	; 11
			i = (i + 1) % 2;
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	81 70       	andi	r24, 0x01	; 1
 142:	90 78       	andi	r25, 0x80	; 128
 144:	99 23       	and	r25, r25
 146:	24 f4       	brge	.+8      	; 0x150 <main+0x78>
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	8e 6f       	ori	r24, 0xFE	; 254
 14c:	9f 6f       	ori	r25, 0xFF	; 255
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	18 2f       	mov	r17, r24
 152:	21 c0       	rjmp	.+66     	; 0x196 <main+0xbe>
			}else if (num_sec == 2){
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	91 f4       	brne	.+36     	; 0x17c <main+0xa4>
			PORTD = sec_2[i];
 158:	81 2f       	mov	r24, r17
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	fc 01       	movw	r30, r24
 15e:	e1 5f       	subi	r30, 0xF1	; 241
 160:	fe 4f       	sbci	r31, 0xFE	; 254
 162:	20 81       	ld	r18, Z
 164:	2b b9       	out	0x0b, r18	; 11
			i = (i + 1) % 8;
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	87 70       	andi	r24, 0x07	; 7
 16a:	90 78       	andi	r25, 0x80	; 128
 16c:	99 23       	and	r25, r25
 16e:	24 f4       	brge	.+8      	; 0x178 <main+0xa0>
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	88 6f       	ori	r24, 0xF8	; 248
 174:	9f 6f       	ori	r25, 0xFF	; 255
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	18 2f       	mov	r17, r24
 17a:	0d c0       	rjmp	.+26     	; 0x196 <main+0xbe>
			}else {
			PORTD = sec3[i];
 17c:	81 2f       	mov	r24, r17
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	fc 01       	movw	r30, r24
 182:	e0 50       	subi	r30, 0x00	; 0
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	20 81       	ld	r18, Z
 188:	2b b9       	out	0x0b, r18	; 11
			i = (i + 1) % 15;
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	6f e0       	ldi	r22, 0x0F	; 15
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <__divmodhi4>
 194:	18 2f       	mov	r17, r24
 196:	87 ea       	ldi	r24, 0xA7	; 167
 198:	91 e6       	ldi	r25, 0x61	; 97
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <main+0xc2>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0xc8>
 1a0:	00 00       	nop
 1a2:	ad cf       	rjmp	.-166    	; 0xfe <main+0x26>

000001a4 <__divmodhi4>:
 1a4:	97 fb       	bst	r25, 7
 1a6:	07 2e       	mov	r0, r23
 1a8:	16 f4       	brtc	.+4      	; 0x1ae <__divmodhi4+0xa>
 1aa:	00 94       	com	r0
 1ac:	07 d0       	rcall	.+14     	; 0x1bc <__divmodhi4_neg1>
 1ae:	77 fd       	sbrc	r23, 7
 1b0:	09 d0       	rcall	.+18     	; 0x1c4 <__divmodhi4_neg2>
 1b2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__udivmodhi4>
 1b6:	07 fc       	sbrc	r0, 7
 1b8:	05 d0       	rcall	.+10     	; 0x1c4 <__divmodhi4_neg2>
 1ba:	3e f4       	brtc	.+14     	; 0x1ca <__divmodhi4_exit>

000001bc <__divmodhi4_neg1>:
 1bc:	90 95       	com	r25
 1be:	81 95       	neg	r24
 1c0:	9f 4f       	sbci	r25, 0xFF	; 255
 1c2:	08 95       	ret

000001c4 <__divmodhi4_neg2>:
 1c4:	70 95       	com	r23
 1c6:	61 95       	neg	r22
 1c8:	7f 4f       	sbci	r23, 0xFF	; 255

000001ca <__divmodhi4_exit>:
 1ca:	08 95       	ret

000001cc <__udivmodhi4>:
 1cc:	aa 1b       	sub	r26, r26
 1ce:	bb 1b       	sub	r27, r27
 1d0:	51 e1       	ldi	r21, 0x11	; 17
 1d2:	07 c0       	rjmp	.+14     	; 0x1e2 <__udivmodhi4_ep>

000001d4 <__udivmodhi4_loop>:
 1d4:	aa 1f       	adc	r26, r26
 1d6:	bb 1f       	adc	r27, r27
 1d8:	a6 17       	cp	r26, r22
 1da:	b7 07       	cpc	r27, r23
 1dc:	10 f0       	brcs	.+4      	; 0x1e2 <__udivmodhi4_ep>
 1de:	a6 1b       	sub	r26, r22
 1e0:	b7 0b       	sbc	r27, r23

000001e2 <__udivmodhi4_ep>:
 1e2:	88 1f       	adc	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	5a 95       	dec	r21
 1e8:	a9 f7       	brne	.-22     	; 0x1d4 <__udivmodhi4_loop>
 1ea:	80 95       	com	r24
 1ec:	90 95       	com	r25
 1ee:	bc 01       	movw	r22, r24
 1f0:	cd 01       	movw	r24, r26
 1f2:	08 95       	ret

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
