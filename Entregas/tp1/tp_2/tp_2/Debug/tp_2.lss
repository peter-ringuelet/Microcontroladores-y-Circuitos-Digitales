
tp_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000178  00800100  00000b72  00000c06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800278  00800278  00000d7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000db0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002529  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dee  00000000  00000000  00003529  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001259  00000000  00000000  00004317  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000055c  00000000  00000000  00005570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083d  00000000  00000000  00005acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017a2  00000000  00000000  00006309  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00007aab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <__vector_14>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	12 e0       	ldi	r17, 0x02	; 2
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e2 e7       	ldi	r30, 0x72	; 114
  bc:	fb e0       	ldi	r31, 0x0B	; 11
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a8 37       	cpi	r26, 0x78	; 120
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
  ca:	22 e0       	ldi	r18, 0x02	; 2
  cc:	a8 e7       	ldi	r26, 0x78	; 120
  ce:	b2 e0       	ldi	r27, 0x02	; 2
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	ac 39       	cpi	r26, 0x9C	; 156
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 97 02 	call	0x52e	; 0x52e <main>
  de:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <LCDsendChar>:
	LCDGotoXY(x, y);
	for (i = 0; (uint8_t)pgm_read_byte(&FlashLoc[i]); i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
  e6:	65 b1       	in	r22, 0x05	; 5
  e8:	98 2f       	mov	r25, r24
  ea:	90 74       	andi	r25, 0x40	; 64
  ec:	49 2f       	mov	r20, r25
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	55 95       	asr	r21
  f2:	47 95       	ror	r20
  f4:	55 95       	asr	r21
  f6:	47 95       	ror	r20
  f8:	55 95       	asr	r21
  fa:	47 95       	ror	r20
  fc:	55 95       	asr	r21
  fe:	47 95       	ror	r20
 100:	98 2f       	mov	r25, r24
 102:	90 78       	andi	r25, 0x80	; 128
 104:	29 2f       	mov	r18, r25
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	02 2e       	mov	r0, r18
 10a:	23 2f       	mov	r18, r19
 10c:	00 0c       	add	r0, r0
 10e:	22 1f       	adc	r18, r18
 110:	33 0b       	sbc	r19, r19
 112:	00 0c       	add	r0, r0
 114:	22 1f       	adc	r18, r18
 116:	33 1f       	adc	r19, r19
 118:	96 2f       	mov	r25, r22
 11a:	99 7f       	andi	r25, 0xF9	; 249
 11c:	49 2b       	or	r20, r25
 11e:	24 2b       	or	r18, r20
 120:	25 b9       	out	0x05, r18	; 5
 122:	68 b1       	in	r22, 0x08	; 8
 124:	98 2f       	mov	r25, r24
 126:	90 71       	andi	r25, 0x10	; 16
 128:	49 2f       	mov	r20, r25
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	55 95       	asr	r21
 12e:	47 95       	ror	r20
 130:	55 95       	asr	r21
 132:	47 95       	ror	r20
 134:	55 95       	asr	r21
 136:	47 95       	ror	r20
 138:	98 2f       	mov	r25, r24
 13a:	90 72       	andi	r25, 0x20	; 32
 13c:	29 2f       	mov	r18, r25
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	35 95       	asr	r19
 142:	27 95       	ror	r18
 144:	35 95       	asr	r19
 146:	27 95       	ror	r18
 148:	35 95       	asr	r19
 14a:	27 95       	ror	r18
 14c:	96 2f       	mov	r25, r22
 14e:	99 7f       	andi	r25, 0xF9	; 249
 150:	49 2b       	or	r20, r25
 152:	24 2b       	or	r18, r20
 154:	28 b9       	out	0x08, r18	; 8
 156:	9b b1       	in	r25, 0x0b	; 11
 158:	92 60       	ori	r25, 0x02	; 2
 15a:	9b b9       	out	0x0b, r25	; 11
 15c:	9b b1       	in	r25, 0x0b	; 11
 15e:	91 60       	ori	r25, 0x01	; 1
 160:	9b b9       	out	0x0b, r25	; 11
 162:	25 ed       	ldi	r18, 0xD5	; 213
 164:	2a 95       	dec	r18
 166:	f1 f7       	brne	.-4      	; 0x164 <LCDsendChar+0x7e>
 168:	00 00       	nop
 16a:	9b b1       	in	r25, 0x0b	; 11
 16c:	9e 7f       	andi	r25, 0xFE	; 254
 16e:	9b b9       	out	0x0b, r25	; 11
 170:	9b b1       	in	r25, 0x0b	; 11
 172:	9d 7f       	andi	r25, 0xFD	; 253
 174:	9b b9       	out	0x0b, r25	; 11
 176:	95 ed       	ldi	r25, 0xD5	; 213
 178:	9a 95       	dec	r25
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCDsendChar+0x92>
 17c:	00 00       	nop
 17e:	65 b1       	in	r22, 0x05	; 5
 180:	20 e1       	ldi	r18, 0x10	; 16
 182:	82 9f       	mul	r24, r18
 184:	c0 01       	movw	r24, r0
 186:	11 24       	eor	r1, r1
 188:	ac 01       	movw	r20, r24
 18a:	40 74       	andi	r20, 0x40	; 64
 18c:	55 27       	eor	r21, r21
 18e:	55 95       	asr	r21
 190:	47 95       	ror	r20
 192:	55 95       	asr	r21
 194:	47 95       	ror	r20
 196:	55 95       	asr	r21
 198:	47 95       	ror	r20
 19a:	55 95       	asr	r21
 19c:	47 95       	ror	r20
 19e:	9c 01       	movw	r18, r24
 1a0:	20 78       	andi	r18, 0x80	; 128
 1a2:	33 27       	eor	r19, r19
 1a4:	02 2e       	mov	r0, r18
 1a6:	23 2f       	mov	r18, r19
 1a8:	00 0c       	add	r0, r0
 1aa:	22 1f       	adc	r18, r18
 1ac:	33 0b       	sbc	r19, r19
 1ae:	00 0c       	add	r0, r0
 1b0:	22 1f       	adc	r18, r18
 1b2:	33 1f       	adc	r19, r19
 1b4:	36 2f       	mov	r19, r22
 1b6:	39 7f       	andi	r19, 0xF9	; 249
 1b8:	43 2b       	or	r20, r19
 1ba:	24 2b       	or	r18, r20
 1bc:	25 b9       	out	0x05, r18	; 5
 1be:	48 b1       	in	r20, 0x08	; 8
 1c0:	9c 01       	movw	r18, r24
 1c2:	20 71       	andi	r18, 0x10	; 16
 1c4:	33 27       	eor	r19, r19
 1c6:	35 95       	asr	r19
 1c8:	27 95       	ror	r18
 1ca:	35 95       	asr	r19
 1cc:	27 95       	ror	r18
 1ce:	35 95       	asr	r19
 1d0:	27 95       	ror	r18
 1d2:	80 72       	andi	r24, 0x20	; 32
 1d4:	99 27       	eor	r25, r25
 1d6:	95 95       	asr	r25
 1d8:	87 95       	ror	r24
 1da:	95 95       	asr	r25
 1dc:	87 95       	ror	r24
 1de:	95 95       	asr	r25
 1e0:	87 95       	ror	r24
 1e2:	94 2f       	mov	r25, r20
 1e4:	99 7f       	andi	r25, 0xF9	; 249
 1e6:	29 2b       	or	r18, r25
 1e8:	82 2b       	or	r24, r18
 1ea:	88 b9       	out	0x08, r24	; 8
 1ec:	8b b1       	in	r24, 0x0b	; 11
 1ee:	82 60       	ori	r24, 0x02	; 2
 1f0:	8b b9       	out	0x0b, r24	; 11
 1f2:	8b b1       	in	r24, 0x0b	; 11
 1f4:	81 60       	ori	r24, 0x01	; 1
 1f6:	8b b9       	out	0x0b, r24	; 11
 1f8:	85 ed       	ldi	r24, 0xD5	; 213
 1fa:	8a 95       	dec	r24
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCDsendChar+0x114>
 1fe:	00 00       	nop
 200:	8b b1       	in	r24, 0x0b	; 11
 202:	8e 7f       	andi	r24, 0xFE	; 254
 204:	8b b9       	out	0x0b, r24	; 11
 206:	8b b1       	in	r24, 0x0b	; 11
 208:	8d 7f       	andi	r24, 0xFD	; 253
 20a:	8b b9       	out	0x0b, r24	; 11
 20c:	95 ed       	ldi	r25, 0xD5	; 213
 20e:	9a 95       	dec	r25
 210:	f1 f7       	brne	.-4      	; 0x20e <LCDsendChar+0x128>
 212:	00 00       	nop
 214:	08 95       	ret

00000216 <LCDsendCommand>:
 216:	65 b1       	in	r22, 0x05	; 5
 218:	98 2f       	mov	r25, r24
 21a:	90 74       	andi	r25, 0x40	; 64
 21c:	49 2f       	mov	r20, r25
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	55 95       	asr	r21
 222:	47 95       	ror	r20
 224:	55 95       	asr	r21
 226:	47 95       	ror	r20
 228:	55 95       	asr	r21
 22a:	47 95       	ror	r20
 22c:	55 95       	asr	r21
 22e:	47 95       	ror	r20
 230:	98 2f       	mov	r25, r24
 232:	90 78       	andi	r25, 0x80	; 128
 234:	29 2f       	mov	r18, r25
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	02 2e       	mov	r0, r18
 23a:	23 2f       	mov	r18, r19
 23c:	00 0c       	add	r0, r0
 23e:	22 1f       	adc	r18, r18
 240:	33 0b       	sbc	r19, r19
 242:	00 0c       	add	r0, r0
 244:	22 1f       	adc	r18, r18
 246:	33 1f       	adc	r19, r19
 248:	96 2f       	mov	r25, r22
 24a:	99 7f       	andi	r25, 0xF9	; 249
 24c:	49 2b       	or	r20, r25
 24e:	24 2b       	or	r18, r20
 250:	25 b9       	out	0x05, r18	; 5
 252:	68 b1       	in	r22, 0x08	; 8
 254:	98 2f       	mov	r25, r24
 256:	90 71       	andi	r25, 0x10	; 16
 258:	49 2f       	mov	r20, r25
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	55 95       	asr	r21
 25e:	47 95       	ror	r20
 260:	55 95       	asr	r21
 262:	47 95       	ror	r20
 264:	55 95       	asr	r21
 266:	47 95       	ror	r20
 268:	98 2f       	mov	r25, r24
 26a:	90 72       	andi	r25, 0x20	; 32
 26c:	29 2f       	mov	r18, r25
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	35 95       	asr	r19
 272:	27 95       	ror	r18
 274:	35 95       	asr	r19
 276:	27 95       	ror	r18
 278:	35 95       	asr	r19
 27a:	27 95       	ror	r18
 27c:	96 2f       	mov	r25, r22
 27e:	99 7f       	andi	r25, 0xF9	; 249
 280:	49 2b       	or	r20, r25
 282:	24 2b       	or	r18, r20
 284:	28 b9       	out	0x08, r18	; 8
 286:	9b b1       	in	r25, 0x0b	; 11
 288:	91 60       	ori	r25, 0x01	; 1
 28a:	9b b9       	out	0x0b, r25	; 11
 28c:	ef e9       	ldi	r30, 0x9F	; 159
 28e:	ff e0       	ldi	r31, 0x0F	; 15
 290:	31 97       	sbiw	r30, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <LCDsendCommand+0x7a>
 294:	00 c0       	rjmp	.+0      	; 0x296 <LCDsendCommand+0x80>
 296:	00 00       	nop
 298:	9b b1       	in	r25, 0x0b	; 11
 29a:	9e 7f       	andi	r25, 0xFE	; 254
 29c:	9b b9       	out	0x0b, r25	; 11
 29e:	ef e9       	ldi	r30, 0x9F	; 159
 2a0:	ff e0       	ldi	r31, 0x0F	; 15
 2a2:	31 97       	sbiw	r30, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCDsendCommand+0x8c>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCDsendCommand+0x92>
 2a8:	00 00       	nop
 2aa:	65 b1       	in	r22, 0x05	; 5
 2ac:	f0 e1       	ldi	r31, 0x10	; 16
 2ae:	8f 9f       	mul	r24, r31
 2b0:	c0 01       	movw	r24, r0
 2b2:	11 24       	eor	r1, r1
 2b4:	ac 01       	movw	r20, r24
 2b6:	40 74       	andi	r20, 0x40	; 64
 2b8:	55 27       	eor	r21, r21
 2ba:	55 95       	asr	r21
 2bc:	47 95       	ror	r20
 2be:	55 95       	asr	r21
 2c0:	47 95       	ror	r20
 2c2:	55 95       	asr	r21
 2c4:	47 95       	ror	r20
 2c6:	55 95       	asr	r21
 2c8:	47 95       	ror	r20
 2ca:	9c 01       	movw	r18, r24
 2cc:	20 78       	andi	r18, 0x80	; 128
 2ce:	33 27       	eor	r19, r19
 2d0:	02 2e       	mov	r0, r18
 2d2:	23 2f       	mov	r18, r19
 2d4:	00 0c       	add	r0, r0
 2d6:	22 1f       	adc	r18, r18
 2d8:	33 0b       	sbc	r19, r19
 2da:	00 0c       	add	r0, r0
 2dc:	22 1f       	adc	r18, r18
 2de:	33 1f       	adc	r19, r19
 2e0:	36 2f       	mov	r19, r22
 2e2:	39 7f       	andi	r19, 0xF9	; 249
 2e4:	43 2b       	or	r20, r19
 2e6:	24 2b       	or	r18, r20
 2e8:	25 b9       	out	0x05, r18	; 5
 2ea:	48 b1       	in	r20, 0x08	; 8
 2ec:	9c 01       	movw	r18, r24
 2ee:	20 71       	andi	r18, 0x10	; 16
 2f0:	33 27       	eor	r19, r19
 2f2:	35 95       	asr	r19
 2f4:	27 95       	ror	r18
 2f6:	35 95       	asr	r19
 2f8:	27 95       	ror	r18
 2fa:	35 95       	asr	r19
 2fc:	27 95       	ror	r18
 2fe:	80 72       	andi	r24, 0x20	; 32
 300:	99 27       	eor	r25, r25
 302:	95 95       	asr	r25
 304:	87 95       	ror	r24
 306:	95 95       	asr	r25
 308:	87 95       	ror	r24
 30a:	95 95       	asr	r25
 30c:	87 95       	ror	r24
 30e:	94 2f       	mov	r25, r20
 310:	99 7f       	andi	r25, 0xF9	; 249
 312:	29 2b       	or	r18, r25
 314:	82 2b       	or	r24, r18
 316:	88 b9       	out	0x08, r24	; 8
 318:	8b b1       	in	r24, 0x0b	; 11
 31a:	81 60       	ori	r24, 0x01	; 1
 31c:	8b b9       	out	0x0b, r24	; 11
 31e:	8f e9       	ldi	r24, 0x9F	; 159
 320:	9f e0       	ldi	r25, 0x0F	; 15
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <LCDsendCommand+0x10c>
 326:	00 c0       	rjmp	.+0      	; 0x328 <LCDsendCommand+0x112>
 328:	00 00       	nop
 32a:	8b b1       	in	r24, 0x0b	; 11
 32c:	8e 7f       	andi	r24, 0xFE	; 254
 32e:	8b b9       	out	0x0b, r24	; 11
 330:	ef e9       	ldi	r30, 0x9F	; 159
 332:	ff e0       	ldi	r31, 0x0F	; 15
 334:	31 97       	sbiw	r30, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <LCDsendCommand+0x11e>
 338:	00 c0       	rjmp	.+0      	; 0x33a <LCDsendCommand+0x124>
 33a:	00 00       	nop
 33c:	08 95       	ret

0000033e <LCDclr>:
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	0e 94 0b 01 	call	0x216	; 0x216 <LCDsendCommand>
 344:	08 95       	ret

00000346 <LCDstring>:
 346:	0f 93       	push	r16
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	00 97       	sbiw	r24, 0x00	; 0
 350:	69 f0       	breq	.+26     	; 0x36c <LCDstring+0x26>
 352:	d6 2f       	mov	r29, r22
 354:	8c 01       	movw	r16, r24
 356:	c0 e0       	ldi	r28, 0x00	; 0
 358:	07 c0       	rjmp	.+14     	; 0x368 <LCDstring+0x22>
 35a:	f8 01       	movw	r30, r16
 35c:	ec 0f       	add	r30, r28
 35e:	f1 1d       	adc	r31, r1
 360:	80 81       	ld	r24, Z
 362:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDsendChar>
 366:	cf 5f       	subi	r28, 0xFF	; 255
 368:	cd 17       	cp	r28, r29
 36a:	b8 f3       	brcs	.-18     	; 0x35a <LCDstring+0x14>
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	08 95       	ret

00000376 <LCDGotoXY>:
 376:	62 30       	cpi	r22, 0x02	; 2
 378:	31 f0       	breq	.+12     	; 0x386 <LCDGotoXY+0x10>
 37a:	63 30       	cpi	r22, 0x03	; 3
 37c:	31 f0       	breq	.+12     	; 0x38a <LCDGotoXY+0x14>
 37e:	61 30       	cpi	r22, 0x01	; 1
 380:	29 f4       	brne	.+10     	; 0x38c <LCDGotoXY+0x16>
 382:	80 5c       	subi	r24, 0xC0	; 192
 384:	03 c0       	rjmp	.+6      	; 0x38c <LCDGotoXY+0x16>
 386:	8c 5e       	subi	r24, 0xEC	; 236
 388:	01 c0       	rjmp	.+2      	; 0x38c <LCDGotoXY+0x16>
 38a:	8c 5a       	subi	r24, 0xAC	; 172
 38c:	80 68       	ori	r24, 0x80	; 128
 38e:	0e 94 0b 01 	call	0x216	; 0x216 <LCDsendCommand>
 392:	08 95       	ret

00000394 <LCDdefinechar>:
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc, uint8_t char_code)
{
 394:	ef 92       	push	r14
 396:	ff 92       	push	r15
 398:	0f 93       	push	r16
 39a:	1f 93       	push	r17
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	7c 01       	movw	r14, r24
	uint8_t a, pcc;
	uint16_t i;
	a = (char_code << 3) | 0x40;
 3a2:	86 2f       	mov	r24, r22
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	80 64       	ori	r24, 0x40	; 64
	for (i = 0; i < 8; i++)
 3b4:	c0 e0       	ldi	r28, 0x00	; 0
 3b6:	d0 e0       	ldi	r29, 0x00	; 0
 3b8:	0d c0       	rjmp	.+26     	; 0x3d4 <LCDdefinechar+0x40>
	{
		pcc = pgm_read_byte(&pc[i]);
 3ba:	f7 01       	movw	r30, r14
 3bc:	ec 0f       	add	r30, r28
 3be:	fd 1f       	adc	r31, r29
 3c0:	14 91       	lpm	r17, Z
		LCDsendCommand(a++);
 3c2:	01 e0       	ldi	r16, 0x01	; 1
 3c4:	08 0f       	add	r16, r24
 3c6:	0e 94 0b 01 	call	0x216	; 0x216 <LCDsendCommand>
		LCDsendChar(pcc);
 3ca:	81 2f       	mov	r24, r17
 3cc:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDsendChar>
void LCDdefinechar(const uint8_t *pc, uint8_t char_code)
{
	uint8_t a, pcc;
	uint16_t i;
	a = (char_code << 3) | 0x40;
	for (i = 0; i < 8; i++)
 3d0:	21 96       	adiw	r28, 0x01	; 1
	{
		pcc = pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
 3d2:	80 2f       	mov	r24, r16
void LCDdefinechar(const uint8_t *pc, uint8_t char_code)
{
	uint8_t a, pcc;
	uint16_t i;
	a = (char_code << 3) | 0x40;
	for (i = 0; i < 8; i++)
 3d4:	c8 30       	cpi	r28, 0x08	; 8
 3d6:	d1 05       	cpc	r29, r1
 3d8:	80 f3       	brcs	.-32     	; 0x3ba <LCDdefinechar+0x26>
	{
		pcc = pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
	}
}
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	0f 91       	pop	r16
 3e2:	ff 90       	pop	r15
 3e4:	ef 90       	pop	r14
 3e6:	08 95       	ret

000003e8 <LCDinit>:
	LCP &= ~(1 << LCD_E);
	_delay_ms(1);
#endif
}
void LCDinit(void) // Initializes LCD
{
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ec:	8f e5       	ldi	r24, 0x5F	; 95
 3ee:	9a ee       	ldi	r25, 0xEA	; 234
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <LCDinit+0x8>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <LCDinit+0xe>
 3f6:	00 00       	nop
#ifdef LCD_4bit
	// 4 bit part
	_delay_ms(15);
	// LDP=0x00;
	LCD_DATAWR(0x00);
 3f8:	85 b1       	in	r24, 0x05	; 5
 3fa:	89 7f       	andi	r24, 0xF9	; 249
 3fc:	85 b9       	out	0x05, r24	; 5
 3fe:	88 b1       	in	r24, 0x08	; 8
 400:	89 7f       	andi	r24, 0xF9	; 249
 402:	88 b9       	out	0x08, r24	; 8
	LCP = 0x00;
 404:	1b b8       	out	0x0b, r1	; 11
	DDRC |= 0x06;
 406:	87 b1       	in	r24, 0x07	; 7
 408:	86 60       	ori	r24, 0x06	; 6
 40a:	87 b9       	out	0x07, r24	; 7
	DDRB |= 0x06;
 40c:	84 b1       	in	r24, 0x04	; 4
 40e:	86 60       	ori	r24, 0x06	; 6
 410:	84 b9       	out	0x04, r24	; 4
	LDDR1 |= 1 << LCD_D7 | 1 << LCD_D6;
 412:	84 b1       	in	r24, 0x04	; 4
 414:	86 60       	ori	r24, 0x06	; 6
 416:	84 b9       	out	0x04, r24	; 4
	LDDR2 |= 1 << LCD_D4 | 1 << LCD_D5;
 418:	87 b1       	in	r24, 0x07	; 7
 41a:	86 60       	ori	r24, 0x06	; 6
 41c:	87 b9       	out	0x07, r24	; 7
	// LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
	LCDR |= 1 << LCD_E | 1 << LCD_RW | 1 << LCD_RS;
 41e:	8a b1       	in	r24, 0x0a	; 10
 420:	83 60       	ori	r24, 0x03	; 3
 422:	8a b9       	out	0x0a, r24	; 10
	//---------one------
	// LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
	LCD_DATAWR(0b00110000);
 424:	85 b1       	in	r24, 0x05	; 5
 426:	89 7f       	andi	r24, 0xF9	; 249
 428:	85 b9       	out	0x05, r24	; 5
 42a:	88 b1       	in	r24, 0x08	; 8
 42c:	86 60       	ori	r24, 0x06	; 6
 42e:	88 b9       	out	0x08, r24	; 8
	LCP |= 1 << LCD_E | 0 << LCD_RW | 0 << LCD_RS;
 430:	8b b1       	in	r24, 0x0b	; 11
 432:	81 60       	ori	r24, 0x01	; 1
 434:	8b b9       	out	0x0b, r24	; 11
 436:	8f e9       	ldi	r24, 0x9F	; 159
 438:	9f e0       	ldi	r25, 0x0F	; 15
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 440:	00 00       	nop
	_delay_ms(1);
	LCP &= ~(1 << LCD_E);
 442:	8b b1       	in	r24, 0x0b	; 11
 444:	8e 7f       	andi	r24, 0xFE	; 254
 446:	8b b9       	out	0x0b, r24	; 11
 448:	8f e9       	ldi	r24, 0x9F	; 159
 44a:	9f e0       	ldi	r25, 0x0F	; 15
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 452:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	// LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
	LCD_DATAWR(0b00110000);
 454:	85 b1       	in	r24, 0x05	; 5
 456:	89 7f       	andi	r24, 0xF9	; 249
 458:	85 b9       	out	0x05, r24	; 5
 45a:	88 b1       	in	r24, 0x08	; 8
 45c:	86 60       	ori	r24, 0x06	; 6
 45e:	88 b9       	out	0x08, r24	; 8
	LCP |= 1 << LCD_E | 0 << LCD_RW | 0 << LCD_RS;
 460:	8b b1       	in	r24, 0x0b	; 11
 462:	81 60       	ori	r24, 0x01	; 1
 464:	8b b9       	out	0x0b, r24	; 11
 466:	8f e9       	ldi	r24, 0x9F	; 159
 468:	9f e0       	ldi	r25, 0x0F	; 15
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 470:	00 00       	nop
	_delay_ms(1);
	LCP &= ~(1 << LCD_E);
 472:	8b b1       	in	r24, 0x0b	; 11
 474:	8e 7f       	andi	r24, 0xFE	; 254
 476:	8b b9       	out	0x0b, r24	; 11
 478:	8f e9       	ldi	r24, 0x9F	; 159
 47a:	9f e0       	ldi	r25, 0x0F	; 15
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	f1 f7       	brne	.-4      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 480:	00 c0       	rjmp	.+0      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 482:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	// LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
	LCD_DATAWR(0b00100000);
 484:	85 b1       	in	r24, 0x05	; 5
 486:	89 7f       	andi	r24, 0xF9	; 249
 488:	85 b9       	out	0x05, r24	; 5
 48a:	88 b1       	in	r24, 0x08	; 8
 48c:	89 7f       	andi	r24, 0xF9	; 249
 48e:	84 60       	ori	r24, 0x04	; 4
 490:	88 b9       	out	0x08, r24	; 8
	LCP |= 1 << LCD_E | 0 << LCD_RW | 0 << LCD_RS;
 492:	8b b1       	in	r24, 0x0b	; 11
 494:	81 60       	ori	r24, 0x01	; 1
 496:	8b b9       	out	0x0b, r24	; 11
 498:	8f e9       	ldi	r24, 0x9F	; 159
 49a:	9f e0       	ldi	r25, 0x0F	; 15
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 4a2:	00 00       	nop
	_delay_ms(1);
	LCP &= ~(1 << LCD_E);
 4a4:	8b b1       	in	r24, 0x0b	; 11
 4a6:	8e 7f       	andi	r24, 0xFE	; 254
 4a8:	8b b9       	out	0x0b, r24	; 11
 4aa:	8f e9       	ldi	r24, 0x9F	; 159
 4ac:	9f e0       	ldi	r25, 0x0F	; 15
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4b4:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 4b6:	88 e2       	ldi	r24, 0x28	; 40
 4b8:	0e 94 0b 01 	call	0x216	; 0x216 <LCDsendCommand>
	//-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 4bc:	8c e0       	ldi	r24, 0x0C	; 12
 4be:	0e 94 0b 01 	call	0x216	; 0x216 <LCDsendCommand>
	// init 8 custom chars
	uint8_t ch = 0, chn = 0;
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	c0 e0       	ldi	r28, 0x00	; 0
	while (ch < 64)
 4c6:	0a c0       	rjmp	.+20     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
	{
		LCDdefinechar((LcdCustomChar + ch), chn++);
 4c8:	d1 e0       	ldi	r29, 0x01	; 1
 4ca:	d6 0f       	add	r29, r22
 4cc:	8c 2f       	mov	r24, r28
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	88 59       	subi	r24, 0x98	; 152
 4d2:	9f 4f       	sbci	r25, 0xFF	; 255
 4d4:	0e 94 ca 01 	call	0x394	; 0x394 <LCDdefinechar>
		ch = ch + 8;
 4d8:	c8 5f       	subi	r28, 0xF8	; 248
	LCDsendCommand(0b00001100);
	// init 8 custom chars
	uint8_t ch = 0, chn = 0;
	while (ch < 64)
	{
		LCDdefinechar((LcdCustomChar + ch), chn++);
 4da:	6d 2f       	mov	r22, r29
	LCDsendCommand(0b00101000);
	//-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
	// init 8 custom chars
	uint8_t ch = 0, chn = 0;
	while (ch < 64)
 4dc:	c0 34       	cpi	r28, 0x40	; 64
 4de:	a0 f3       	brcs	.-24     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
		LCDdefinechar((LcdCustomChar + ch), chn++);
		ch = ch + 8;
	}

#endif
}
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	08 95       	ret

000004e6 <Iniciar_LCD>:
 4e6:	2f ef       	ldi	r18, 0xFF	; 255
 4e8:	80 e7       	ldi	r24, 0x70	; 112
 4ea:	92 e0       	ldi	r25, 0x02	; 2
 4ec:	21 50       	subi	r18, 0x01	; 1
 4ee:	80 40       	sbci	r24, 0x00	; 0
 4f0:	90 40       	sbci	r25, 0x00	; 0
 4f2:	e1 f7       	brne	.-8      	; 0x4ec <Iniciar_LCD+0x6>
 4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <Iniciar_LCD+0x10>
 4f6:	00 00       	nop
#include "timer.h"    // Asegurate de incluir el correcto
#include "salidas.h"

void Iniciar_LCD(){
	_delay_ms(50);
	LCDinit();
 4f8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCDinit>
 4fc:	2f ef       	ldi	r18, 0xFF	; 255
 4fe:	80 e7       	ldi	r24, 0x70	; 112
 500:	92 e0       	ldi	r25, 0x02	; 2
 502:	21 50       	subi	r18, 0x01	; 1
 504:	80 40       	sbci	r24, 0x00	; 0
 506:	90 40       	sbci	r25, 0x00	; 0
 508:	e1 f7       	brne	.-8      	; 0x502 <Iniciar_LCD+0x1c>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <Iniciar_LCD+0x26>
 50c:	00 00       	nop
	_delay_ms(50);
	LCDclr();
 50e:	0e 94 9f 01 	call	0x33e	; 0x33e <LCDclr>
	LCDGotoXY(2,0);
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	82 e0       	ldi	r24, 0x02	; 2
 516:	0e 94 bb 01 	call	0x376	; 0x376 <LCDGotoXY>
 51a:	2f ef       	ldi	r18, 0xFF	; 255
 51c:	80 e7       	ldi	r24, 0x70	; 112
 51e:	92 e0       	ldi	r25, 0x02	; 2
 520:	21 50       	subi	r18, 0x01	; 1
 522:	80 40       	sbci	r24, 0x00	; 0
 524:	90 40       	sbci	r25, 0x00	; 0
 526:	e1 f7       	brne	.-8      	; 0x520 <Iniciar_LCD+0x3a>
 528:	00 c0       	rjmp	.+0      	; 0x52a <Iniciar_LCD+0x44>
 52a:	00 00       	nop
 52c:	08 95       	ret

0000052e <main>:
	_delay_ms(50);
}

int main(void)
{
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	1f 92       	push	r1
 534:	cd b7       	in	r28, 0x3d	; 61
 536:	de b7       	in	r29, 0x3e	; 62
	Iniciar_LCD();
 538:	0e 94 73 02 	call	0x4e6	; 0x4e6 <Iniciar_LCD>
	Timer_Init(10);       // por ejemplo, MEF cada 10ms
 53c:	8a e0       	ldi	r24, 0x0A	; 10
 53e:	0e 94 b3 04 	call	0x966	; 0x966 <Timer_Init>
	Iniciar_MEF();
 542:	0e 94 bb 02 	call	0x576	; 0x576 <Iniciar_MEF>

	srand(1234);
 546:	82 ed       	ldi	r24, 0xD2	; 210
 548:	94 e0       	ldi	r25, 0x04	; 4
 54a:	0e 94 51 05 	call	0xaa2	; 0xaa2 <srand>

	uint8_t car;
	while(1){
		if (GetFLAG_MEF()) {           // ¡Solo cada "tick" de la MEF!
 54e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <GetFLAG_MEF>
 552:	88 23       	and	r24, r24
 554:	e1 f3       	breq	.-8      	; 0x54e <main+0x20>
			// Si querés, podés escanear el teclado acá o adentro de la MEF
			if(!KEYPAD_Scan(&car)){
 556:	ce 01       	movw	r24, r28
 558:	01 96       	adiw	r24, 0x01	; 1
 55a:	0e 94 31 04 	call	0x862	; 0x862 <KEYPAD_Scan>
 55e:	81 11       	cpse	r24, r1
 560:	02 c0       	rjmp	.+4      	; 0x566 <main+0x38>
				car=0xFF;
 562:	8f ef       	ldi	r24, 0xFF	; 255
 564:	89 83       	std	Y+1, r24	; 0x01
			}
			Actualizar_MEF(&car);     // o como corresponda en tu lógica
 566:	8c 2f       	mov	r24, r28
 568:	8f 5f       	subi	r24, 0xFF	; 255
 56a:	0e 94 cf 02 	call	0x59e	; 0x59e <Actualizar_MEF>
			SetFLAG_MEF(0);           // Resetea el flag
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <SetFLAG_MEF>
 574:	ec cf       	rjmp	.-40     	; 0x54e <main+0x20>

00000576 <Iniciar_MEF>:
#define NUM_PALABRAS (sizeof(diccionario)/sizeof(diccionario[0]))

static uint32_t tiempo_mostrar_palabra = 0;

void Iniciar_MEF(){
	estado = inicial;
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <estado>
	estadoAnt = nulo;
 57c:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <estadoAnt>
	errores = 0;
	posActual = 0;
	indiceCodigoActual = 0;
	memset(codigoActual, 0, sizeof(codigoActual));
 580:	83 e0       	ldi	r24, 0x03	; 3
 582:	e8 e8       	ldi	r30, 0x88	; 136
 584:	f2 e0       	ldi	r31, 0x02	; 2
 586:	df 01       	movw	r26, r30
 588:	1d 92       	st	X+, r1
 58a:	8a 95       	dec	r24
 58c:	e9 f7       	brne	.-6      	; 0x588 <Iniciar_MEF+0x12>
	memset(palabraIngresada, 0, sizeof(palabraIngresada));
 58e:	86 e0       	ldi	r24, 0x06	; 6
 590:	ec e7       	ldi	r30, 0x7C	; 124
 592:	f2 e0       	ldi	r31, 0x02	; 2
 594:	df 01       	movw	r26, r30
 596:	1d 92       	st	X+, r1
 598:	8a 95       	dec	r24
 59a:	e9 f7       	brne	.-6      	; 0x596 <Iniciar_MEF+0x20>
 59c:	08 95       	ret

0000059e <Actualizar_MEF>:
}

void Actualizar_MEF(uint8_t* car){
 59e:	0f 93       	push	r16
 5a0:	1f 93       	push	r17
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	ec 01       	movw	r28, r24
	switch(estado){
 5a8:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <estado>
 5ac:	81 30       	cpi	r24, 0x01	; 1
 5ae:	21 f0       	breq	.+8      	; 0x5b8 <Actualizar_MEF+0x1a>
 5b0:	82 30       	cpi	r24, 0x02	; 2
 5b2:	09 f4       	brne	.+2      	; 0x5b6 <Actualizar_MEF+0x18>
 5b4:	47 c0       	rjmp	.+142    	; 0x644 <Actualizar_MEF+0xa6>
 5b6:	6b c0       	rjmp	.+214    	; 0x68e <Actualizar_MEF+0xf0>
		case inicial:
		if(estadoAnt != inicial) {
 5b8:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <estadoAnt>
 5bc:	81 30       	cpi	r24, 0x01	; 1
 5be:	29 f0       	breq	.+10     	; 0x5ca <Actualizar_MEF+0x2c>
			estadoAnt = inicial;
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <estadoAnt>
			pInicio(); // Mostrar pantalla de inicio
 5c6:	0e 94 4c 03 	call	0x698	; 0x698 <pInicio>
		}
		if(*car == '*') {
 5ca:	88 81       	ld	r24, Y
 5cc:	8a 32       	cpi	r24, 0x2A	; 42
 5ce:	09 f0       	breq	.+2      	; 0x5d2 <Actualizar_MEF+0x34>
 5d0:	5e c0       	rjmp	.+188    	; 0x68e <Actualizar_MEF+0xf0>
			estado = mostrando;
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <estado>
			GameCountInit(); // Inicia el contador del juego
 5d8:	0e 94 df 04 	call	0x9be	; 0x9be <GameCountInit>
			// Elegí la palabra
			uint8_t indice = rand() % NUM_PALABRAS;
 5dc:	0e 94 4c 05 	call	0xa98	; 0xa98 <rand>
 5e0:	ac 01       	movw	r20, r24
 5e2:	9c 01       	movw	r18, r24
 5e4:	af ea       	ldi	r26, 0xAF	; 175
 5e6:	b7 e4       	ldi	r27, 0x47	; 71
 5e8:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__umulhisi3>
 5ec:	28 1b       	sub	r18, r24
 5ee:	39 0b       	sbc	r19, r25
 5f0:	36 95       	lsr	r19
 5f2:	27 95       	ror	r18
 5f4:	82 0f       	add	r24, r18
 5f6:	93 1f       	adc	r25, r19
 5f8:	92 95       	swap	r25
 5fa:	82 95       	swap	r24
 5fc:	8f 70       	andi	r24, 0x0F	; 15
 5fe:	89 27       	eor	r24, r25
 600:	9f 70       	andi	r25, 0x0F	; 15
 602:	89 27       	eor	r24, r25
 604:	69 e1       	ldi	r22, 0x19	; 25
 606:	68 9f       	mul	r22, r24
 608:	90 01       	movw	r18, r0
 60a:	69 9f       	mul	r22, r25
 60c:	30 0d       	add	r19, r0
 60e:	11 24       	eor	r1, r1
 610:	ca 01       	movw	r24, r20
 612:	82 1b       	sub	r24, r18
 614:	93 0b       	sbc	r25, r19
			strcpy(palabraSeleccionada, diccionario[indice]);
 616:	fc 01       	movw	r30, r24
 618:	ff 27       	eor	r31, r31
 61a:	ee 0f       	add	r30, r30
 61c:	ff 1f       	adc	r31, r31
 61e:	ec 5f       	subi	r30, 0xFC	; 252
 620:	fe 4f       	sbci	r31, 0xFE	; 254
 622:	60 81       	ld	r22, Z
 624:	71 81       	ldd	r23, Z+1	; 0x01
 626:	82 e8       	ldi	r24, 0x82	; 130
 628:	92 e0       	ldi	r25, 0x02	; 2
 62a:	0e 94 5c 05 	call	0xab8	; 0xab8 <strcpy>
			// Guardá el tiempo de inicio para el delay de 2 segundos
			tiempo_mostrar_palabra = ActualTime();
 62e:	0e 94 d6 04 	call	0x9ac	; 0x9ac <ActualTime>
 632:	60 93 78 02 	sts	0x0278, r22	; 0x800278 <__data_end>
 636:	70 93 79 02 	sts	0x0279, r23	; 0x800279 <__data_end+0x1>
 63a:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <__data_end+0x2>
 63e:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <__data_end+0x3>
 642:	25 c0       	rjmp	.+74     	; 0x68e <Actualizar_MEF+0xf0>
		}
		break;

		case mostrando:
		if(estadoAnt != mostrando) {
 644:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <estadoAnt>
 648:	82 30       	cpi	r24, 0x02	; 2
 64a:	39 f0       	breq	.+14     	; 0x65a <Actualizar_MEF+0xbc>
			estadoAnt = mostrando;
 64c:	82 e0       	ldi	r24, 0x02	; 2
 64e:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <estadoAnt>
			pMostrarPalabra(palabraSeleccionada);
 652:	82 e8       	ldi	r24, 0x82	; 130
 654:	92 e0       	ldi	r25, 0x02	; 2
 656:	0e 94 61 03 	call	0x6c2	; 0x6c2 <pMostrarPalabra>
		}
		// Espera 2 segundos mostrando la palabra
		if(ActualTime() - tiempo_mostrar_palabra >= 200) { // 200 x 10ms = 2s si tu Timer_Init(10)
 65a:	0e 94 d6 04 	call	0x9ac	; 0x9ac <ActualTime>
 65e:	00 91 78 02 	lds	r16, 0x0278	; 0x800278 <__data_end>
 662:	10 91 79 02 	lds	r17, 0x0279	; 0x800279 <__data_end+0x1>
 666:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <__data_end+0x2>
 66a:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <__data_end+0x3>
 66e:	dc 01       	movw	r26, r24
 670:	cb 01       	movw	r24, r22
 672:	80 1b       	sub	r24, r16
 674:	91 0b       	sbc	r25, r17
 676:	a2 0b       	sbc	r26, r18
 678:	b3 0b       	sbc	r27, r19
 67a:	88 3c       	cpi	r24, 0xC8	; 200
 67c:	91 05       	cpc	r25, r1
 67e:	a1 05       	cpc	r26, r1
 680:	b1 05       	cpc	r27, r1
 682:	28 f0       	brcs	.+10     	; 0x68e <Actualizar_MEF+0xf0>
			estado = ingresando;
 684:	83 e0       	ldi	r24, 0x03	; 3
 686:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <estado>
			pIngresarCodigo();
 68a:	0e 94 81 03 	call	0x702	; 0x702 <pIngresarCodigo>
				_delay_ms(5000);
				estado = inicial;
			}*/
			break;
	}
 68e:	df 91       	pop	r29
 690:	cf 91       	pop	r28
 692:	1f 91       	pop	r17
 694:	0f 91       	pop	r16
 696:	08 95       	ret

00000698 <pInicio>:
	LCDGotoXY(12,1);
	LCDsendChar(n1);
	LCDsendChar(n2);
	LCDsendChar(n3);
	LCDGotoXY(12,1);
}
 698:	0e 94 9f 01 	call	0x33e	; 0x33e <LCDclr>
 69c:	60 e0       	ldi	r22, 0x00	; 0
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	0e 94 bb 01 	call	0x376	; 0x376 <LCDGotoXY>
 6a4:	6b e0       	ldi	r22, 0x0B	; 11
 6a6:	8b ee       	ldi	r24, 0xEB	; 235
 6a8:	91 e0       	ldi	r25, 0x01	; 1
 6aa:	0e 94 a3 01 	call	0x346	; 0x346 <LCDstring>
 6ae:	61 e0       	ldi	r22, 0x01	; 1
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	0e 94 bb 01 	call	0x376	; 0x376 <LCDGotoXY>
 6b6:	6e e0       	ldi	r22, 0x0E	; 14
 6b8:	87 ef       	ldi	r24, 0xF7	; 247
 6ba:	91 e0       	ldi	r25, 0x01	; 1
 6bc:	0e 94 a3 01 	call	0x346	; 0x346 <LCDstring>
 6c0:	08 95       	ret

000006c2 <pMostrarPalabra>:

void pMostrarPalabra(const char* palabra) {
 6c2:	cf 93       	push	r28
 6c4:	df 93       	push	r29
 6c6:	ec 01       	movw	r28, r24
	LCDclr();
 6c8:	0e 94 9f 01 	call	0x33e	; 0x33e <LCDclr>
	LCDGotoXY(0,0);
 6cc:	60 e0       	ldi	r22, 0x00	; 0
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	0e 94 bb 01 	call	0x376	; 0x376 <LCDGotoXY>
	LCDstring("Memoriza:", 9);
 6d4:	69 e0       	ldi	r22, 0x09	; 9
 6d6:	8b e1       	ldi	r24, 0x1B	; 27
 6d8:	92 e0       	ldi	r25, 0x02	; 2
 6da:	0e 94 a3 01 	call	0x346	; 0x346 <LCDstring>
	LCDGotoXY(0,1);
 6de:	61 e0       	ldi	r22, 0x01	; 1
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	0e 94 bb 01 	call	0x376	; 0x376 <LCDGotoXY>
	LCDstring(palabra, strlen(palabra));
 6e6:	fe 01       	movw	r30, r28
 6e8:	01 90       	ld	r0, Z+
 6ea:	00 20       	and	r0, r0
 6ec:	e9 f7       	brne	.-6      	; 0x6e8 <pMostrarPalabra+0x26>
 6ee:	31 97       	sbiw	r30, 0x01	; 1
 6f0:	bf 01       	movw	r22, r30
 6f2:	6c 1b       	sub	r22, r28
 6f4:	7d 0b       	sbc	r23, r29
 6f6:	ce 01       	movw	r24, r28
 6f8:	0e 94 a3 01 	call	0x346	; 0x346 <LCDstring>
}
 6fc:	df 91       	pop	r29
 6fe:	cf 91       	pop	r28
 700:	08 95       	ret

00000702 <pIngresarCodigo>:

void pIngresarCodigo() {
	LCDclr();
 702:	0e 94 9f 01 	call	0x33e	; 0x33e <LCDclr>
	LCDGotoXY(0,0);
 706:	60 e0       	ldi	r22, 0x00	; 0
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	0e 94 bb 01 	call	0x376	; 0x376 <LCDGotoXY>
	LCDstring("Palabra:", 8);
 70e:	68 e0       	ldi	r22, 0x08	; 8
 710:	85 e2       	ldi	r24, 0x25	; 37
 712:	92 e0       	ldi	r25, 0x02	; 2
 714:	0e 94 a3 01 	call	0x346	; 0x346 <LCDstring>
	LCDGotoXY(0,1);
 718:	61 e0       	ldi	r22, 0x01	; 1
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	0e 94 bb 01 	call	0x376	; 0x376 <LCDGotoXY>
	LCDstring("Codigo ASCII:", 13);
 720:	6d e0       	ldi	r22, 0x0D	; 13
 722:	8e e2       	ldi	r24, 0x2E	; 46
 724:	92 e0       	ldi	r25, 0x02	; 2
 726:	0e 94 a3 01 	call	0x346	; 0x346 <LCDstring>
 72a:	08 95       	ret

0000072c <KeypadUpdate>:
 */ 

#include <avr/io.h>
#include "teclado.h"

uint8_t KeypadUpdate(uint8_t *key){
 72c:	cf 93       	push	r28
 72e:	df 93       	push	r29
 730:	cd b7       	in	r28, 0x3d	; 61
 732:	de b7       	in	r29, 0x3e	; 62
 734:	60 97       	sbiw	r28, 0x10	; 16
 736:	0f b6       	in	r0, 0x3f	; 63
 738:	f8 94       	cli
 73a:	de bf       	out	0x3e, r29	; 62
 73c:	0f be       	out	0x3f, r0	; 63
 73e:	cd bf       	out	0x3d, r28	; 61
	//devuelve por parametro el caracter presionado y como res de la funcion 1 si se detecto caracter y 0 en c.c.

	static uint8_t Old_key, Last_valid_key=0xFF;

	uint8_t r,c;
	DDRD&=0b01000011;	//PD7 fila (momentaneamente entrada), PD2,3,4 y 5 columnas (siempre entrada)
 740:	2a b1       	in	r18, 0x0a	; 10
 742:	23 74       	andi	r18, 0x43	; 67
 744:	2a b9       	out	0x0a, r18	; 10
	DDRB&=0b11100110;	//PB0,3,y 4 filas (momentaneamente entrada)
 746:	24 b1       	in	r18, 0x04	; 4
 748:	26 7e       	andi	r18, 0xE6	; 230
 74a:	24 b9       	out	0x04, r18	; 4

	PORTD|=0b00111100;	//activo las columnas en pull-up interno
 74c:	2b b1       	in	r18, 0x0b	; 11
 74e:	2c 63       	ori	r18, 0x3C	; 60
 750:	2b b9       	out	0x0b, r18	; 11
	
	PORTB&=0b11100110;	//escribo el nivel que mostraran los puerto cuando los configure en salida
 752:	25 b1       	in	r18, 0x05	; 5
 754:	26 7e       	andi	r18, 0xE6	; 230
 756:	25 b9       	out	0x05, r18	; 5
	PORTD&=0b01111111;
 758:	2b b1       	in	r18, 0x0b	; 11
 75a:	2f 77       	andi	r18, 0x7F	; 127
 75c:	2b b9       	out	0x0b, r18	; 11

	uint8_t let[]={'1','2','3','A','4','5','6','B','7','8','9','C','*','0','#','D'};
 75e:	20 e1       	ldi	r18, 0x10	; 16
 760:	e7 e3       	ldi	r30, 0x37	; 55
 762:	f1 e0       	ldi	r31, 0x01	; 1
 764:	de 01       	movw	r26, r28
 766:	11 96       	adiw	r26, 0x01	; 1
 768:	01 90       	ld	r0, Z+
 76a:	0d 92       	st	X+, r0
 76c:	2a 95       	dec	r18
 76e:	e1 f7       	brne	.-8      	; 0x768 <KeypadUpdate+0x3c>

	for(c=0;c<4;c++){
 770:	e0 e0       	ldi	r30, 0x00	; 0
 772:	67 c0       	rjmp	.+206    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
		DDRD&=0b01000011;
 774:	2a b1       	in	r18, 0x0a	; 10
 776:	23 74       	andi	r18, 0x43	; 67
 778:	2a b9       	out	0x0a, r18	; 10
		DDRB&=0b11100110;
 77a:	24 b1       	in	r18, 0x04	; 4
 77c:	26 7e       	andi	r18, 0xE6	; 230
 77e:	24 b9       	out	0x04, r18	; 4
		if(c==0){
 780:	e1 11       	cpse	r30, r1
 782:	04 c0       	rjmp	.+8      	; 0x78c <KeypadUpdate+0x60>
			DDRB|=0b00010000;
 784:	24 b1       	in	r18, 0x04	; 4
 786:	20 61       	ori	r18, 0x10	; 16
 788:	24 b9       	out	0x04, r18	; 4
 78a:	0f c0       	rjmp	.+30     	; 0x7aa <KeypadUpdate+0x7e>
			}else if(c==1){
 78c:	e1 30       	cpi	r30, 0x01	; 1
 78e:	21 f4       	brne	.+8      	; 0x798 <KeypadUpdate+0x6c>
			DDRB|=0b00001000;
 790:	24 b1       	in	r18, 0x04	; 4
 792:	28 60       	ori	r18, 0x08	; 8
 794:	24 b9       	out	0x04, r18	; 4
 796:	09 c0       	rjmp	.+18     	; 0x7aa <KeypadUpdate+0x7e>
			}else if(c==2){
 798:	e2 30       	cpi	r30, 0x02	; 2
 79a:	21 f4       	brne	.+8      	; 0x7a4 <KeypadUpdate+0x78>
			DDRB|=0b00000001;
 79c:	24 b1       	in	r18, 0x04	; 4
 79e:	21 60       	ori	r18, 0x01	; 1
 7a0:	24 b9       	out	0x04, r18	; 4
 7a2:	03 c0       	rjmp	.+6      	; 0x7aa <KeypadUpdate+0x7e>
			}else{
			DDRD|=0b10000000;
 7a4:	2a b1       	in	r18, 0x0a	; 10
 7a6:	20 68       	ori	r18, 0x80	; 128
 7a8:	2a b9       	out	0x0a, r18	; 10
		}

		if(!(PIND & (0b00001000))){
 7aa:	4b 99       	sbic	0x09, 3	; 9
 7ac:	10 c0       	rjmp	.+32     	; 0x7ce <KeypadUpdate+0xa2>
			*key = (let[c*4+0]);
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	ee 0f       	add	r30, r30
 7b2:	ff 1f       	adc	r31, r31
 7b4:	ee 0f       	add	r30, r30
 7b6:	ff 1f       	adc	r31, r31
 7b8:	21 e0       	ldi	r18, 0x01	; 1
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	2c 0f       	add	r18, r28
 7be:	3d 1f       	adc	r19, r29
 7c0:	e2 0f       	add	r30, r18
 7c2:	f3 1f       	adc	r31, r19
 7c4:	20 81       	ld	r18, Z
 7c6:	fc 01       	movw	r30, r24
 7c8:	20 83       	st	Z, r18
			return 1;
 7ca:	81 e0       	ldi	r24, 0x01	; 1
 7cc:	41 c0       	rjmp	.+130    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
		}
		if(!(PIND & (0b00100000))){
 7ce:	4d 99       	sbic	0x09, 5	; 9
 7d0:	11 c0       	rjmp	.+34     	; 0x7f4 <KeypadUpdate+0xc8>
			*key = (let[c*4+1]);
 7d2:	f0 e0       	ldi	r31, 0x00	; 0
 7d4:	ee 0f       	add	r30, r30
 7d6:	ff 1f       	adc	r31, r31
 7d8:	ee 0f       	add	r30, r30
 7da:	ff 1f       	adc	r31, r31
 7dc:	31 96       	adiw	r30, 0x01	; 1
 7de:	21 e0       	ldi	r18, 0x01	; 1
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	2c 0f       	add	r18, r28
 7e4:	3d 1f       	adc	r19, r29
 7e6:	e2 0f       	add	r30, r18
 7e8:	f3 1f       	adc	r31, r19
 7ea:	20 81       	ld	r18, Z
 7ec:	fc 01       	movw	r30, r24
 7ee:	20 83       	st	Z, r18
			return 1;
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	2e c0       	rjmp	.+92     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
		}
		if(!(PIND & (0b00010000))){
 7f4:	4c 99       	sbic	0x09, 4	; 9
 7f6:	11 c0       	rjmp	.+34     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
			*key = (let[c*4+2]);
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	ee 0f       	add	r30, r30
 7fc:	ff 1f       	adc	r31, r31
 7fe:	ee 0f       	add	r30, r30
 800:	ff 1f       	adc	r31, r31
 802:	32 96       	adiw	r30, 0x02	; 2
 804:	21 e0       	ldi	r18, 0x01	; 1
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	2c 0f       	add	r18, r28
 80a:	3d 1f       	adc	r19, r29
 80c:	e2 0f       	add	r30, r18
 80e:	f3 1f       	adc	r31, r19
 810:	20 81       	ld	r18, Z
 812:	fc 01       	movw	r30, r24
 814:	20 83       	st	Z, r18
			return 1;
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	1b c0       	rjmp	.+54     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
		}
		if(!(PIND & (0b00000100))){
 81a:	4a 99       	sbic	0x09, 2	; 9
 81c:	11 c0       	rjmp	.+34     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
			*key = (let[c*4+3]);
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	ee 0f       	add	r30, r30
 822:	ff 1f       	adc	r31, r31
 824:	ee 0f       	add	r30, r30
 826:	ff 1f       	adc	r31, r31
 828:	33 96       	adiw	r30, 0x03	; 3
 82a:	21 e0       	ldi	r18, 0x01	; 1
 82c:	30 e0       	ldi	r19, 0x00	; 0
 82e:	2c 0f       	add	r18, r28
 830:	3d 1f       	adc	r19, r29
 832:	e2 0f       	add	r30, r18
 834:	f3 1f       	adc	r31, r19
 836:	20 81       	ld	r18, Z
 838:	fc 01       	movw	r30, r24
 83a:	20 83       	st	Z, r18
			return 1;
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	08 c0       	rjmp	.+16     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
	PORTB&=0b11100110;	//escribo el nivel que mostraran los puerto cuando los configure en salida
	PORTD&=0b01111111;

	uint8_t let[]={'1','2','3','A','4','5','6','B','7','8','9','C','*','0','#','D'};

	for(c=0;c<4;c++){
 840:	ef 5f       	subi	r30, 0xFF	; 255
 842:	e4 30       	cpi	r30, 0x04	; 4
 844:	08 f4       	brcc	.+2      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 846:	96 cf       	rjmp	.-212    	; 0x774 <KeypadUpdate+0x48>
		if(!(PIND & (0b00000100))){
			*key = (let[c*4+3]);
			return 1;
		}
	}
	*key = 0xFF;
 848:	2f ef       	ldi	r18, 0xFF	; 255
 84a:	fc 01       	movw	r30, r24
 84c:	20 83       	st	Z, r18
	return 0;
 84e:	80 e0       	ldi	r24, 0x00	; 0
}
 850:	60 96       	adiw	r28, 0x10	; 16
 852:	0f b6       	in	r0, 0x3f	; 63
 854:	f8 94       	cli
 856:	de bf       	out	0x3e, r29	; 62
 858:	0f be       	out	0x3f, r0	; 63
 85a:	cd bf       	out	0x3d, r28	; 61
 85c:	df 91       	pop	r29
 85e:	cf 91       	pop	r28
 860:	08 95       	ret

00000862 <KEYPAD_Scan>:

uint8_t KEYPAD_Scan (uint8_t *pkey){
 862:	0f 93       	push	r16
 864:	1f 93       	push	r17
 866:	cf 93       	push	r28
 868:	df 93       	push	r29
 86a:	1f 92       	push	r1
 86c:	cd b7       	in	r28, 0x3d	; 61
 86e:	de b7       	in	r29, 0x3e	; 62
 870:	8c 01       	movw	r16, r24
	static uint8_t Old_key, Last_valid_key=0xFF; // no hay tecla presionada;
	uint8_t Key;
	KeypadUpdate(&Key);
 872:	ce 01       	movw	r24, r28
 874:	01 96       	adiw	r24, 0x01	; 1
 876:	0e 94 96 03 	call	0x72c	; 0x72c <KeypadUpdate>
	if(Key==0xFF){
 87a:	89 81       	ldd	r24, Y+1	; 0x01
 87c:	8f 3f       	cpi	r24, 0xFF	; 255
 87e:	31 f4       	brne	.+12     	; 0x88c <KEYPAD_Scan+0x2a>
		Old_key=0xFF; // no hay tecla presionada
 880:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <Old_key.1619>
		Last_valid_key=0xFF;
 884:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <Last_valid_key.1620>
		return 0;
 888:	80 e0       	ldi	r24, 0x00	; 0
 88a:	12 c0       	rjmp	.+36     	; 0x8b0 <KEYPAD_Scan+0x4e>
	}
	if(Key==Old_key) { //2da verificación
 88c:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <Old_key.1619>
 890:	89 13       	cpse	r24, r25
 892:	0b c0       	rjmp	.+22     	; 0x8aa <KEYPAD_Scan+0x48>
		if(Key!=Last_valid_key){ //evita múltiple detección
 894:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <Last_valid_key.1620>
 898:	89 17       	cp	r24, r25
 89a:	39 f0       	breq	.+14     	; 0x8aa <KEYPAD_Scan+0x48>
			*pkey=Key;
 89c:	f8 01       	movw	r30, r16
 89e:	80 83       	st	Z, r24
			Last_valid_key = Key;
 8a0:	89 81       	ldd	r24, Y+1	; 0x01
 8a2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <Last_valid_key.1620>
			return 1;
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	03 c0       	rjmp	.+6      	; 0x8b0 <KEYPAD_Scan+0x4e>
		}
	}
	Old_key=Key; //1era verificación
 8aa:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <Old_key.1619>
	return 0;
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	0f 90       	pop	r0
 8b2:	df 91       	pop	r29
 8b4:	cf 91       	pop	r28
 8b6:	1f 91       	pop	r17
 8b8:	0f 91       	pop	r16
 8ba:	08 95       	ret

000008bc <__vector_14>:
void WinCountInit(uint16_t cant){
	cuentaW = cant; // Se inicializa el temporizador
}
uint16_t WinCount(){
	return cuentaW; // Se devuelve el tiempo restante
}
 8bc:	1f 92       	push	r1
 8be:	0f 92       	push	r0
 8c0:	0f b6       	in	r0, 0x3f	; 63
 8c2:	0f 92       	push	r0
 8c4:	11 24       	eor	r1, r1
 8c6:	8f 93       	push	r24
 8c8:	9f 93       	push	r25
 8ca:	af 93       	push	r26
 8cc:	bf 93       	push	r27
 8ce:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <init_count>
 8d2:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <init_count+0x1>
 8d6:	a0 91 8e 02 	lds	r26, 0x028E	; 0x80028e <init_count+0x2>
 8da:	b0 91 8f 02 	lds	r27, 0x028F	; 0x80028f <init_count+0x3>
 8de:	01 96       	adiw	r24, 0x01	; 1
 8e0:	a1 1d       	adc	r26, r1
 8e2:	b1 1d       	adc	r27, r1
 8e4:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <init_count>
 8e8:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <init_count+0x1>
 8ec:	a0 93 8e 02 	sts	0x028E, r26	; 0x80028e <init_count+0x2>
 8f0:	b0 93 8f 02 	sts	0x028F, r27	; 0x80028f <init_count+0x3>
 8f4:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <cuentaMEF>
 8f8:	8f 5f       	subi	r24, 0xFF	; 255
 8fa:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <cuentaMEF>
 8fe:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <topMEF>
 902:	89 13       	cpse	r24, r25
 904:	05 c0       	rjmp	.+10     	; 0x910 <__stack+0x11>
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <FLAG_MEF>
 90c:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <cuentaMEF>
 910:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <FLAG_COUNTING>
 914:	88 23       	and	r24, r24
 916:	99 f0       	breq	.+38     	; 0x93e <__stack+0x3f>
 918:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <cuentaG>
 91c:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <cuentaG+0x1>
 920:	a0 91 92 02 	lds	r26, 0x0292	; 0x800292 <cuentaG+0x2>
 924:	b0 91 93 02 	lds	r27, 0x0293	; 0x800293 <cuentaG+0x3>
 928:	01 96       	adiw	r24, 0x01	; 1
 92a:	a1 1d       	adc	r26, r1
 92c:	b1 1d       	adc	r27, r1
 92e:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <cuentaG>
 932:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <cuentaG+0x1>
 936:	a0 93 92 02 	sts	0x0292, r26	; 0x800292 <cuentaG+0x2>
 93a:	b0 93 93 02 	sts	0x0293, r27	; 0x800293 <cuentaG+0x3>
 93e:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <cuentaW>
 942:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <cuentaW+0x1>
 946:	00 97       	sbiw	r24, 0x00	; 0
 948:	29 f0       	breq	.+10     	; 0x954 <__stack+0x55>
 94a:	01 97       	sbiw	r24, 0x01	; 1
 94c:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <cuentaW+0x1>
 950:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <cuentaW>
 954:	bf 91       	pop	r27
 956:	af 91       	pop	r26
 958:	9f 91       	pop	r25
 95a:	8f 91       	pop	r24
 95c:	0f 90       	pop	r0
 95e:	0f be       	out	0x3f, r0	; 63
 960:	0f 90       	pop	r0
 962:	1f 90       	pop	r1
 964:	18 95       	reti

00000966 <Timer_Init>:
 966:	f8 94       	cli
 968:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <init_count>
 96c:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <init_count+0x1>
 970:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <init_count+0x2>
 974:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <init_count+0x3>
 978:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <topMEF>
 97c:	84 b5       	in	r24, 0x24	; 36
 97e:	82 60       	ori	r24, 0x02	; 2
 980:	84 bd       	out	0x24, r24	; 36
 982:	84 b5       	in	r24, 0x24	; 36
 984:	8e 7f       	andi	r24, 0xFE	; 254
 986:	84 bd       	out	0x24, r24	; 36
 988:	85 b5       	in	r24, 0x25	; 37
 98a:	87 7f       	andi	r24, 0xF7	; 247
 98c:	85 bd       	out	0x25, r24	; 37
 98e:	85 b5       	in	r24, 0x25	; 37
 990:	83 60       	ori	r24, 0x03	; 3
 992:	85 bd       	out	0x25, r24	; 37
 994:	85 b5       	in	r24, 0x25	; 37
 996:	8b 7f       	andi	r24, 0xFB	; 251
 998:	85 bd       	out	0x25, r24	; 37
 99a:	8a ef       	ldi	r24, 0xFA	; 250
 99c:	87 bd       	out	0x27, r24	; 39
 99e:	ee e6       	ldi	r30, 0x6E	; 110
 9a0:	f0 e0       	ldi	r31, 0x00	; 0
 9a2:	80 81       	ld	r24, Z
 9a4:	82 60       	ori	r24, 0x02	; 2
 9a6:	80 83       	st	Z, r24
 9a8:	78 94       	sei
 9aa:	08 95       	ret

000009ac <ActualTime>:
 9ac:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <init_count>
 9b0:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <init_count+0x1>
 9b4:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <init_count+0x2>
 9b8:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <init_count+0x3>
 9bc:	08 95       	ret

000009be <GameCountInit>:
 9be:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <cuentaG>
 9c2:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <cuentaG+0x1>
 9c6:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <cuentaG+0x2>
 9ca:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <cuentaG+0x3>
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <FLAG_COUNTING>
 9d4:	08 95       	ret

000009d6 <SetFLAG_MEF>:

// Getters y Setters del FLAG_MEF
void SetFLAG_MEF(uint8_t flag){
	FLAG_MEF = flag;
 9d6:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <FLAG_MEF>
 9da:	08 95       	ret

000009dc <GetFLAG_MEF>:
}
uint8_t GetFLAG_MEF(){
	return FLAG_MEF;
}
 9dc:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <FLAG_MEF>
 9e0:	08 95       	ret

000009e2 <__umulhisi3>:
 9e2:	a2 9f       	mul	r26, r18
 9e4:	b0 01       	movw	r22, r0
 9e6:	b3 9f       	mul	r27, r19
 9e8:	c0 01       	movw	r24, r0
 9ea:	a3 9f       	mul	r26, r19
 9ec:	70 0d       	add	r23, r0
 9ee:	81 1d       	adc	r24, r1
 9f0:	11 24       	eor	r1, r1
 9f2:	91 1d       	adc	r25, r1
 9f4:	b2 9f       	mul	r27, r18
 9f6:	70 0d       	add	r23, r0
 9f8:	81 1d       	adc	r24, r1
 9fa:	11 24       	eor	r1, r1
 9fc:	91 1d       	adc	r25, r1
 9fe:	08 95       	ret

00000a00 <do_rand>:
 a00:	8f 92       	push	r8
 a02:	9f 92       	push	r9
 a04:	af 92       	push	r10
 a06:	bf 92       	push	r11
 a08:	cf 92       	push	r12
 a0a:	df 92       	push	r13
 a0c:	ef 92       	push	r14
 a0e:	ff 92       	push	r15
 a10:	cf 93       	push	r28
 a12:	df 93       	push	r29
 a14:	ec 01       	movw	r28, r24
 a16:	68 81       	ld	r22, Y
 a18:	79 81       	ldd	r23, Y+1	; 0x01
 a1a:	8a 81       	ldd	r24, Y+2	; 0x02
 a1c:	9b 81       	ldd	r25, Y+3	; 0x03
 a1e:	61 15       	cp	r22, r1
 a20:	71 05       	cpc	r23, r1
 a22:	81 05       	cpc	r24, r1
 a24:	91 05       	cpc	r25, r1
 a26:	21 f4       	brne	.+8      	; 0xa30 <do_rand+0x30>
 a28:	64 e2       	ldi	r22, 0x24	; 36
 a2a:	79 ed       	ldi	r23, 0xD9	; 217
 a2c:	8b e5       	ldi	r24, 0x5B	; 91
 a2e:	97 e0       	ldi	r25, 0x07	; 7
 a30:	2d e1       	ldi	r18, 0x1D	; 29
 a32:	33 ef       	ldi	r19, 0xF3	; 243
 a34:	41 e0       	ldi	r20, 0x01	; 1
 a36:	50 e0       	ldi	r21, 0x00	; 0
 a38:	0e 94 63 05 	call	0xac6	; 0xac6 <__divmodsi4>
 a3c:	49 01       	movw	r8, r18
 a3e:	5a 01       	movw	r10, r20
 a40:	9b 01       	movw	r18, r22
 a42:	ac 01       	movw	r20, r24
 a44:	a7 ea       	ldi	r26, 0xA7	; 167
 a46:	b1 e4       	ldi	r27, 0x41	; 65
 a48:	0e 94 82 05 	call	0xb04	; 0xb04 <__muluhisi3>
 a4c:	6b 01       	movw	r12, r22
 a4e:	7c 01       	movw	r14, r24
 a50:	ac ee       	ldi	r26, 0xEC	; 236
 a52:	b4 ef       	ldi	r27, 0xF4	; 244
 a54:	a5 01       	movw	r20, r10
 a56:	94 01       	movw	r18, r8
 a58:	0e 94 90 05 	call	0xb20	; 0xb20 <__mulohisi3>
 a5c:	dc 01       	movw	r26, r24
 a5e:	cb 01       	movw	r24, r22
 a60:	8c 0d       	add	r24, r12
 a62:	9d 1d       	adc	r25, r13
 a64:	ae 1d       	adc	r26, r14
 a66:	bf 1d       	adc	r27, r15
 a68:	b7 ff       	sbrs	r27, 7
 a6a:	03 c0       	rjmp	.+6      	; 0xa72 <do_rand+0x72>
 a6c:	01 97       	sbiw	r24, 0x01	; 1
 a6e:	a1 09       	sbc	r26, r1
 a70:	b0 48       	sbci	r27, 0x80	; 128
 a72:	88 83       	st	Y, r24
 a74:	99 83       	std	Y+1, r25	; 0x01
 a76:	aa 83       	std	Y+2, r26	; 0x02
 a78:	bb 83       	std	Y+3, r27	; 0x03
 a7a:	9f 77       	andi	r25, 0x7F	; 127
 a7c:	df 91       	pop	r29
 a7e:	cf 91       	pop	r28
 a80:	ff 90       	pop	r15
 a82:	ef 90       	pop	r14
 a84:	df 90       	pop	r13
 a86:	cf 90       	pop	r12
 a88:	bf 90       	pop	r11
 a8a:	af 90       	pop	r10
 a8c:	9f 90       	pop	r9
 a8e:	8f 90       	pop	r8
 a90:	08 95       	ret

00000a92 <rand_r>:
 a92:	0e 94 00 05 	call	0xa00	; 0xa00 <do_rand>
 a96:	08 95       	ret

00000a98 <rand>:
 a98:	80 e0       	ldi	r24, 0x00	; 0
 a9a:	91 e0       	ldi	r25, 0x01	; 1
 a9c:	0e 94 00 05 	call	0xa00	; 0xa00 <do_rand>
 aa0:	08 95       	ret

00000aa2 <srand>:
 aa2:	a0 e0       	ldi	r26, 0x00	; 0
 aa4:	b0 e0       	ldi	r27, 0x00	; 0
 aa6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 aaa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 aae:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 ab2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 ab6:	08 95       	ret

00000ab8 <strcpy>:
 ab8:	fb 01       	movw	r30, r22
 aba:	dc 01       	movw	r26, r24
 abc:	01 90       	ld	r0, Z+
 abe:	0d 92       	st	X+, r0
 ac0:	00 20       	and	r0, r0
 ac2:	e1 f7       	brne	.-8      	; 0xabc <strcpy+0x4>
 ac4:	08 95       	ret

00000ac6 <__divmodsi4>:
 ac6:	05 2e       	mov	r0, r21
 ac8:	97 fb       	bst	r25, 7
 aca:	1e f4       	brtc	.+6      	; 0xad2 <__divmodsi4+0xc>
 acc:	00 94       	com	r0
 ace:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__negsi2>
 ad2:	57 fd       	sbrc	r21, 7
 ad4:	07 d0       	rcall	.+14     	; 0xae4 <__divmodsi4_neg2>
 ad6:	0e 94 95 05 	call	0xb2a	; 0xb2a <__udivmodsi4>
 ada:	07 fc       	sbrc	r0, 7
 adc:	03 d0       	rcall	.+6      	; 0xae4 <__divmodsi4_neg2>
 ade:	4e f4       	brtc	.+18     	; 0xaf2 <__divmodsi4_exit>
 ae0:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__negsi2>

00000ae4 <__divmodsi4_neg2>:
 ae4:	50 95       	com	r21
 ae6:	40 95       	com	r20
 ae8:	30 95       	com	r19
 aea:	21 95       	neg	r18
 aec:	3f 4f       	sbci	r19, 0xFF	; 255
 aee:	4f 4f       	sbci	r20, 0xFF	; 255
 af0:	5f 4f       	sbci	r21, 0xFF	; 255

00000af2 <__divmodsi4_exit>:
 af2:	08 95       	ret

00000af4 <__negsi2>:
 af4:	90 95       	com	r25
 af6:	80 95       	com	r24
 af8:	70 95       	com	r23
 afa:	61 95       	neg	r22
 afc:	7f 4f       	sbci	r23, 0xFF	; 255
 afe:	8f 4f       	sbci	r24, 0xFF	; 255
 b00:	9f 4f       	sbci	r25, 0xFF	; 255
 b02:	08 95       	ret

00000b04 <__muluhisi3>:
 b04:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__umulhisi3>
 b08:	a5 9f       	mul	r26, r21
 b0a:	90 0d       	add	r25, r0
 b0c:	b4 9f       	mul	r27, r20
 b0e:	90 0d       	add	r25, r0
 b10:	a4 9f       	mul	r26, r20
 b12:	80 0d       	add	r24, r0
 b14:	91 1d       	adc	r25, r1
 b16:	11 24       	eor	r1, r1
 b18:	08 95       	ret

00000b1a <__mulshisi3>:
 b1a:	b7 ff       	sbrs	r27, 7
 b1c:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__muluhisi3>

00000b20 <__mulohisi3>:
 b20:	0e 94 82 05 	call	0xb04	; 0xb04 <__muluhisi3>
 b24:	82 1b       	sub	r24, r18
 b26:	93 0b       	sbc	r25, r19
 b28:	08 95       	ret

00000b2a <__udivmodsi4>:
 b2a:	a1 e2       	ldi	r26, 0x21	; 33
 b2c:	1a 2e       	mov	r1, r26
 b2e:	aa 1b       	sub	r26, r26
 b30:	bb 1b       	sub	r27, r27
 b32:	fd 01       	movw	r30, r26
 b34:	0d c0       	rjmp	.+26     	; 0xb50 <__udivmodsi4_ep>

00000b36 <__udivmodsi4_loop>:
 b36:	aa 1f       	adc	r26, r26
 b38:	bb 1f       	adc	r27, r27
 b3a:	ee 1f       	adc	r30, r30
 b3c:	ff 1f       	adc	r31, r31
 b3e:	a2 17       	cp	r26, r18
 b40:	b3 07       	cpc	r27, r19
 b42:	e4 07       	cpc	r30, r20
 b44:	f5 07       	cpc	r31, r21
 b46:	20 f0       	brcs	.+8      	; 0xb50 <__udivmodsi4_ep>
 b48:	a2 1b       	sub	r26, r18
 b4a:	b3 0b       	sbc	r27, r19
 b4c:	e4 0b       	sbc	r30, r20
 b4e:	f5 0b       	sbc	r31, r21

00000b50 <__udivmodsi4_ep>:
 b50:	66 1f       	adc	r22, r22
 b52:	77 1f       	adc	r23, r23
 b54:	88 1f       	adc	r24, r24
 b56:	99 1f       	adc	r25, r25
 b58:	1a 94       	dec	r1
 b5a:	69 f7       	brne	.-38     	; 0xb36 <__udivmodsi4_loop>
 b5c:	60 95       	com	r22
 b5e:	70 95       	com	r23
 b60:	80 95       	com	r24
 b62:	90 95       	com	r25
 b64:	9b 01       	movw	r18, r22
 b66:	ac 01       	movw	r20, r24
 b68:	bd 01       	movw	r22, r26
 b6a:	cf 01       	movw	r24, r30
 b6c:	08 95       	ret

00000b6e <_exit>:
 b6e:	f8 94       	cli

00000b70 <__stop_program>:
 b70:	ff cf       	rjmp	.-2      	; 0xb70 <__stop_program>
