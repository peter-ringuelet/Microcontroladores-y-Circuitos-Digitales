
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000198  00800100  000012f6  0000138a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000093  00800298  00800298  00001522  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001522  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001580  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000180e  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ade  00000000  00000000  00002f26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b55  00000000  00000000  00003a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000031c  00000000  00000000  0000455c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ed  00000000  00000000  00004878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000089e  00000000  00000000  00004f65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00005803  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 28 03 	jmp	0x650	; 0x650 <__vector_18>
      4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	63 64       	ori	r22, 0x43	; 67
      6a:	69 6e       	ori	r22, 0xE9	; 233
      6c:	6f 70       	andi	r22, 0x0F	; 15
      6e:	73 75       	andi	r23, 0x53	; 83
      70:	78 58       	subi	r23, 0x88	; 136
      72:	5b 00       	.word	0x005b	; ????

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf ef       	ldi	r28, 0xFF	; 255
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	12 e0       	ldi	r17, 0x02	; 2
      82:	a0 e0       	ldi	r26, 0x00	; 0
      84:	b1 e0       	ldi	r27, 0x01	; 1
      86:	e6 ef       	ldi	r30, 0xF6	; 246
      88:	f2 e1       	ldi	r31, 0x12	; 18
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a8 39       	cpi	r26, 0x98	; 152
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	23 e0       	ldi	r18, 0x03	; 3
      98:	a8 e9       	ldi	r26, 0x98	; 152
      9a:	b2 e0       	ldi	r27, 0x02	; 2
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	ab 32       	cpi	r26, 0x2B	; 43
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 99 01 	call	0x332	; 0x332 <main>
      aa:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <I2C_Init>:
#include "I2C.h"

void I2C_Init(void){
	TWSR=0x00;
      b2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR=152;
      b6:	88 e9       	ldi	r24, 0x98	; 152
      b8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR=0x04;
      bc:	84 e0       	ldi	r24, 0x04	; 4
      be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      c2:	08 95       	ret

000000c4 <I2C_Start>:
}

void I2C_Start(void){
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
      c4:	84 ea       	ldi	r24, 0xA4	; 164
      c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while ((TWCR & (1 << TWINT)) == 0);
      ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      ce:	88 23       	and	r24, r24
      d0:	e4 f7       	brge	.-8      	; 0xca <I2C_Start+0x6>
}
      d2:	08 95       	ret

000000d4 <I2C_Write>:
void I2C_Write(unsigned char data){
	TWDR = data;
      d4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT) | (1 << TWEN);
      d8:	84 e8       	ldi	r24, 0x84	; 132
      da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while ((TWCR & (1 << TWINT)) == 0);
      de:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      e2:	88 23       	and	r24, r24
      e4:	e4 f7       	brge	.-8      	; 0xde <I2C_Write+0xa>
}
      e6:	08 95       	ret

000000e8 <I2C_Read>:

unsigned char I2C_Read(unsigned char isLast){
	if (isLast == 0){  // send ACK
      e8:	81 11       	cpse	r24, r1
      ea:	04 c0       	rjmp	.+8      	; 0xf4 <I2C_Read+0xc>
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
      ec:	84 ec       	ldi	r24, 0xC4	; 196
      ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      f2:	03 c0       	rjmp	.+6      	; 0xfa <I2C_Read+0x12>
	}
	else{  // send NACK
		TWCR = (1 << TWINT) | (1 << TWEN);
      f4:	84 e8       	ldi	r24, 0x84	; 132
      f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	}
	while ((TWCR & (1 << TWINT)) == 0);
      fa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      fe:	88 23       	and	r24, r24
     100:	e4 f7       	brge	.-8      	; 0xfa <I2C_Read+0x12>
	return TWDR;
     102:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     106:	08 95       	ret

00000108 <I2C_Stop>:

void I2C_Stop(void){
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     108:	84 e9       	ldi	r24, 0x94	; 148
     10a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     10e:	08 95       	ret

00000110 <bcd_to_dec>:
#include "RTC.h"
#include "I2C.h"

uint8_t bcd_to_dec(uint8_t val) {
	return ((val / 16 * 10) + (val % 16));
     110:	98 2f       	mov	r25, r24
     112:	92 95       	swap	r25
     114:	9f 70       	andi	r25, 0x0F	; 15
     116:	99 0f       	add	r25, r25
     118:	29 2f       	mov	r18, r25
     11a:	22 0f       	add	r18, r18
     11c:	22 0f       	add	r18, r18
     11e:	92 0f       	add	r25, r18
     120:	8f 70       	andi	r24, 0x0F	; 15
}
     122:	89 0f       	add	r24, r25
     124:	08 95       	ret

00000126 <dec_to_bcd>:

uint8_t dec_to_bcd(uint8_t val) {
	return ((val / 10 * 16) + (val % 10));
     126:	9d ec       	ldi	r25, 0xCD	; 205
     128:	89 9f       	mul	r24, r25
     12a:	91 2d       	mov	r25, r1
     12c:	11 24       	eor	r1, r1
     12e:	96 95       	lsr	r25
     130:	96 95       	lsr	r25
     132:	96 95       	lsr	r25
     134:	39 2f       	mov	r19, r25
     136:	33 0f       	add	r19, r19
     138:	23 2f       	mov	r18, r19
     13a:	22 0f       	add	r18, r18
     13c:	22 0f       	add	r18, r18
     13e:	23 0f       	add	r18, r19
     140:	82 1b       	sub	r24, r18
}
     142:	20 e1       	ldi	r18, 0x10	; 16
     144:	92 9f       	mul	r25, r18
     146:	80 0d       	add	r24, r0
     148:	11 24       	eor	r1, r1
     14a:	08 95       	ret

0000014c <RTC_Init>:

void RTC_Init() {
	I2C_Init();
     14c:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_Init>
     150:	08 95       	ret

00000152 <RTC_SetHora>:
}

void RTC_SetHora(Hora_t *hora) {
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	ec 01       	movw	r28, r24
	I2C_Start();
     158:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_Start>
	I2C_Write(DS3231_WRITE);
     15c:	80 ed       	ldi	r24, 0xD0	; 208
     15e:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Write>
	I2C_Write(DS3231_SECONDS);
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Write>
	I2C_Write(hora->Second & MASK_SEC);
     168:	88 81       	ld	r24, Y
     16a:	8f 77       	andi	r24, 0x7F	; 127
     16c:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Write>
	I2C_Write(hora->Minute & MASK_MIN);
     170:	89 81       	ldd	r24, Y+1	; 0x01
     172:	8f 77       	andi	r24, 0x7F	; 127
     174:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Write>
	I2C_Write(hora->Hour & MASK_HORA);
     178:	8a 81       	ldd	r24, Y+2	; 0x02
     17a:	8f 73       	andi	r24, 0x3F	; 63
     17c:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Write>
	I2C_Stop();
     180:	0e 94 84 00 	call	0x108	; 0x108 <I2C_Stop>
}
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	08 95       	ret

0000018a <RTC_SetFecha>:

void RTC_SetFecha(Fecha_t *fecha) {
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	ec 01       	movw	r28, r24
	I2C_Start();
     190:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_Start>
	I2C_Write(DS3231_WRITE);
     194:	80 ed       	ldi	r24, 0xD0	; 208
     196:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Write>
	I2C_Write(DS3231_DAYS);
     19a:	84 e0       	ldi	r24, 0x04	; 4
     19c:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Write>
	I2C_Write(fecha->Day & MASK_DAY);
     1a0:	88 81       	ld	r24, Y
     1a2:	8f 73       	andi	r24, 0x3F	; 63
     1a4:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Write>
	I2C_Write(fecha->Month & MASK_MES);
     1a8:	89 81       	ldd	r24, Y+1	; 0x01
     1aa:	8f 71       	andi	r24, 0x1F	; 31
     1ac:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Write>
	I2C_Write(fecha->Year & MASK_YEAR);
     1b0:	8a 81       	ldd	r24, Y+2	; 0x02
     1b2:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Write>
	I2C_Stop();
     1b6:	0e 94 84 00 	call	0x108	; 0x108 <I2C_Stop>
}
     1ba:	df 91       	pop	r29
     1bc:	cf 91       	pop	r28
     1be:	08 95       	ret

000001c0 <RTC_GetHora>:

void RTC_GetHora(Hora_t *hora) {
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	ec 01       	movw	r28, r24
	I2C_Start();
     1c6:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_Start>
	I2C_Write(DS3231_WRITE);
     1ca:	80 ed       	ldi	r24, 0xD0	; 208
     1cc:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Write>
	I2C_Write(DS3231_SECONDS);
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Write>
	I2C_Start();
     1d6:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_Start>
	I2C_Write(DS3231_READ);
     1da:	81 ed       	ldi	r24, 0xD1	; 209
     1dc:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Write>
	hora->Second = (I2C_Read(NACK)) & MASK_SEC;
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	0e 94 74 00 	call	0xe8	; 0xe8 <I2C_Read>
     1e6:	8f 77       	andi	r24, 0x7F	; 127
     1e8:	88 83       	st	Y, r24
	hora->Minute = (I2C_Read(NACK)) & MASK_MIN;
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	0e 94 74 00 	call	0xe8	; 0xe8 <I2C_Read>
     1f0:	8f 77       	andi	r24, 0x7F	; 127
     1f2:	89 83       	std	Y+1, r24	; 0x01
	hora->Hour = (I2C_Read(ACK)) & MASK_HORA;
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	0e 94 74 00 	call	0xe8	; 0xe8 <I2C_Read>
     1fa:	8f 73       	andi	r24, 0x3F	; 63
     1fc:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Stop();
     1fe:	0e 94 84 00 	call	0x108	; 0x108 <I2C_Stop>
}
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
     206:	08 95       	ret

00000208 <RTC_GetFecha>:

void RTC_GetFecha(Fecha_t *fecha) {
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	ec 01       	movw	r28, r24
	I2C_Start();
     20e:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_Start>
	I2C_Write(DS3231_WRITE);
     212:	80 ed       	ldi	r24, 0xD0	; 208
     214:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Write>
	I2C_Write(DS3231_DAYS);
     218:	84 e0       	ldi	r24, 0x04	; 4
     21a:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Write>
	I2C_Start();
     21e:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_Start>
	I2C_Write(DS3231_READ);
     222:	81 ed       	ldi	r24, 0xD1	; 209
     224:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Write>
	fecha->Day = (I2C_Read(NACK)) & MASK_DAY;
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	0e 94 74 00 	call	0xe8	; 0xe8 <I2C_Read>
     22e:	8f 73       	andi	r24, 0x3F	; 63
     230:	88 83       	st	Y, r24
	fecha->Month = (I2C_Read(NACK)) & MASK_MES;
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	0e 94 74 00 	call	0xe8	; 0xe8 <I2C_Read>
     238:	8f 71       	andi	r24, 0x1F	; 31
     23a:	89 83       	std	Y+1, r24	; 0x01
	fecha->Year = (I2C_Read(ACK)) & MASK_YEAR;
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	0e 94 74 00 	call	0xe8	; 0xe8 <I2C_Read>
     242:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Stop();
     244:	0e 94 84 00 	call	0x108	; 0x108 <I2C_Stop>
}
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <RTC_GetTime>:

void RTC_GetTime(RTC_t *rtc) {
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	ec 01       	movw	r28, r24
	RTC_GetHora(&rtc->hora);
     254:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <RTC_GetHora>
	RTC_GetFecha(&rtc->fecha);
     258:	ce 01       	movw	r24, r28
     25a:	03 96       	adiw	r24, 0x03	; 3
     25c:	0e 94 04 01 	call	0x208	; 0x208 <RTC_GetFecha>
}
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	08 95       	ret

00000266 <RTC_SetTime>:

void RTC_SetTime(RTC_t *rtc) {
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	ec 01       	movw	r28, r24
	RTC_SetHora(&rtc->hora);
     26c:	0e 94 a9 00 	call	0x152	; 0x152 <RTC_SetHora>
	RTC_SetFecha(&rtc->fecha);
     270:	ce 01       	movw	r24, r28
     272:	03 96       	adiw	r24, 0x03	; 3
     274:	0e 94 c5 00 	call	0x18a	; 0x18a <RTC_SetFecha>
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	08 95       	ret

0000027e <SerialPort_Init>:

}

void SerialPort_TX_Interrupt_Disable(void)
{
	UCSR0B &=~(1<<UDRIE0);
     27e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     282:	96 e0       	ldi	r25, 0x06	; 6
     284:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     288:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     28c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     290:	08 95       	ret

00000292 <SerialPort_TX_Enable>:
     292:	e1 ec       	ldi	r30, 0xC1	; 193
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	80 81       	ld	r24, Z
     298:	88 60       	ori	r24, 0x08	; 8
     29a:	80 83       	st	Z, r24
     29c:	08 95       	ret

0000029e <SerialPort_RX_Enable>:


// Inicializaci?n de Receptor

void SerialPort_RX_Enable(void){
	UCSR0B |= (1<<RXEN0);
     29e:	e1 ec       	ldi	r30, 0xC1	; 193
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	80 61       	ori	r24, 0x10	; 16
     2a6:	80 83       	st	Z, r24
     2a8:	08 95       	ret

000002aa <SerialPort_RX_Interrupt_Enable>:
}

void SerialPort_RX_Interrupt_Enable(void){
	UCSR0B |= (1<<RXCIE0);
     2aa:	e1 ec       	ldi	r30, 0xC1	; 193
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	80 81       	ld	r24, Z
     2b0:	80 68       	ori	r24, 0x80	; 128
     2b2:	80 83       	st	Z, r24
     2b4:	08 95       	ret

000002b6 <SerialPort_Wait_For_TX_Buffer_Free>:
// Transmisi?n

// Espera hasta que el buffer de TX este libre.
void SerialPort_Wait_For_TX_Buffer_Free(void){
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
     2b6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     2ba:	85 ff       	sbrs	r24, 5
     2bc:	fc cf       	rjmp	.-8      	; 0x2b6 <SerialPort_Wait_For_TX_Buffer_Free>
}
     2be:	08 95       	ret

000002c0 <SerialPort_Send_Data>:

void SerialPort_Send_Data(char data){
	UDR0 = data;
     2c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     2c4:	08 95       	ret

000002c6 <SerialPort_Send_String>:
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
     2c6:	ef 92       	push	r14
     2c8:	ff 92       	push	r15
     2ca:	0f 93       	push	r16
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	7c 01       	movw	r14, r24
	uint8_t i = 0;
     2d2:	c0 e0       	ldi	r28, 0x00	; 0
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
     2d4:	07 c0       	rjmp	.+14     	; 0x2e4 <SerialPort_Send_String+0x1e>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
     2d6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <SerialPort_Wait_For_TX_Buffer_Free>
		SerialPort_Send_Data(msg[i]);
     2da:	f8 01       	movw	r30, r16
     2dc:	80 81       	ld	r24, Z
     2de:	0e 94 60 01 	call	0x2c0	; 0x2c0 <SerialPort_Send_Data>
		i++;
     2e2:	cf 5f       	subi	r28, 0xFF	; 255
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
     2e4:	87 01       	movw	r16, r14
     2e6:	0c 0f       	add	r16, r28
     2e8:	11 1d       	adc	r17, r1
     2ea:	f8 01       	movw	r30, r16
     2ec:	80 81       	ld	r24, Z
     2ee:	81 11       	cpse	r24, r1
     2f0:	f2 cf       	rjmp	.-28     	; 0x2d6 <SerialPort_Send_String+0x10>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
		SerialPort_Send_Data(msg[i]);
		i++;
	}
}
     2f2:	cf 91       	pop	r28
     2f4:	1f 91       	pop	r17
     2f6:	0f 91       	pop	r16
     2f8:	ff 90       	pop	r15
     2fa:	ef 90       	pop	r14
     2fc:	08 95       	ret

000002fe <hora_igual>:
uint8_t alarma_count = 0;

char mensaje[100];

uint8_t hora_igual(Hora_t *a, Hora_t *b) {
	return (a->Hour == b->Hour) && (a->Minute == b->Minute) && (a->Second == b->Second);
     2fe:	fc 01       	movw	r30, r24
     300:	32 81       	ldd	r19, Z+2	; 0x02
     302:	fb 01       	movw	r30, r22
     304:	22 81       	ldd	r18, Z+2	; 0x02
     306:	32 13       	cpse	r19, r18
     308:	0e c0       	rjmp	.+28     	; 0x326 <hora_igual+0x28>
     30a:	fc 01       	movw	r30, r24
     30c:	31 81       	ldd	r19, Z+1	; 0x01
     30e:	fb 01       	movw	r30, r22
     310:	21 81       	ldd	r18, Z+1	; 0x01
     312:	32 13       	cpse	r19, r18
     314:	0a c0       	rjmp	.+20     	; 0x32a <hora_igual+0x2c>
     316:	fc 01       	movw	r30, r24
     318:	90 81       	ld	r25, Z
     31a:	fb 01       	movw	r30, r22
     31c:	80 81       	ld	r24, Z
     31e:	98 17       	cp	r25, r24
     320:	31 f0       	breq	.+12     	; 0x32e <hora_igual+0x30>
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	08 95       	ret
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	08 95       	ret
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	08 95       	ret
     32e:	81 e0       	ldi	r24, 0x01	; 1
}
     330:	08 95       	ret

00000332 <main>:

int main(void) {
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	00 d0       	rcall	.+0      	; 0x338 <main+0x6>
     338:	00 d0       	rcall	.+0      	; 0x33a <main+0x8>
     33a:	00 d0       	rcall	.+0      	; 0x33c <main+0xa>
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
	SerialPort_Init(BR9600);
     340:	87 e6       	ldi	r24, 0x67	; 103
     342:	0e 94 3f 01 	call	0x27e	; 0x27e <SerialPort_Init>
	SerialPort_TX_Enable();
     346:	0e 94 49 01 	call	0x292	; 0x292 <SerialPort_TX_Enable>
	SerialPort_RX_Enable();
     34a:	0e 94 4f 01 	call	0x29e	; 0x29e <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();
     34e:	0e 94 55 01 	call	0x2aa	; 0x2aa <SerialPort_RX_Interrupt_Enable>
	sei();
     352:	78 94       	sei

	SerialPort_Send_String("UART FUNCIONANDO\n\r");
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SerialPort_Send_String>

	RTC_Init();
     35c:	0e 94 a6 00 	call	0x14c	; 0x14c <RTC_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     360:	8f e3       	ldi	r24, 0x3F	; 63
     362:	9c e9       	ldi	r25, 0x9C	; 156
     364:	01 97       	sbiw	r24, 0x01	; 1
     366:	f1 f7       	brne	.-4      	; 0x364 <main+0x32>
     368:	00 c0       	rjmp	.+0      	; 0x36a <main+0x38>
     36a:	00 00       	nop
	_delay_ms(10);

	SerialPort_Send_String("Bienvenido al reloj!\n\r");
     36c:	83 e1       	ldi	r24, 0x13	; 19
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SerialPort_Send_String>
	SerialPort_Send_String("Comandos disponibles: ON, OFF, SET TIME, SET ALARM\n\r");
     374:	8a e2       	ldi	r24, 0x2A	; 42
     376:	91 e0       	ldi	r25, 0x01	; 1
     378:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SerialPort_Send_String>

	while (1) {
		RTC_GetTime(&currentTime);
     37c:	85 e2       	ldi	r24, 0x25	; 37
     37e:	93 e0       	ldi	r25, 0x03	; 3
     380:	0e 94 27 01 	call	0x24e	; 0x24e <RTC_GetTime>

		if (alarma_activa && !alarma_triggered && hora_igual(&currentTime.hora, &alarma)) {
     384:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <alarma_activa>
     388:	88 23       	and	r24, r24
     38a:	91 f0       	breq	.+36     	; 0x3b0 <main+0x7e>
     38c:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <alarma_triggered>
     390:	81 11       	cpse	r24, r1
     392:	0e c0       	rjmp	.+28     	; 0x3b0 <main+0x7e>
     394:	62 e2       	ldi	r22, 0x22	; 34
     396:	73 e0       	ldi	r23, 0x03	; 3
     398:	85 e2       	ldi	r24, 0x25	; 37
     39a:	93 e0       	ldi	r25, 0x03	; 3
     39c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <hora_igual>
     3a0:	88 23       	and	r24, r24
     3a2:	31 f0       	breq	.+12     	; 0x3b0 <main+0x7e>
			alarma_triggered = 1;
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <alarma_triggered>
			alarma_count = 5;
     3aa:	85 e0       	ldi	r24, 0x05	; 5
     3ac:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <__data_end>
		}

		if (mostrar_hora) {
     3b0:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <mostrar_hora>
     3b4:	88 23       	and	r24, r24
     3b6:	f1 f1       	breq	.+124    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
			uint8_t h = bcd_to_dec(currentTime.hora.Hour);
     3b8:	05 e2       	ldi	r16, 0x25	; 37
     3ba:	13 e0       	ldi	r17, 0x03	; 3
     3bc:	f8 01       	movw	r30, r16
     3be:	82 81       	ldd	r24, Z+2	; 0x02
     3c0:	0e 94 88 00 	call	0x110	; 0x110 <bcd_to_dec>
     3c4:	d8 2e       	mov	r13, r24
			uint8_t m = bcd_to_dec(currentTime.hora.Minute);
     3c6:	f8 01       	movw	r30, r16
     3c8:	81 81       	ldd	r24, Z+1	; 0x01
     3ca:	0e 94 88 00 	call	0x110	; 0x110 <bcd_to_dec>
     3ce:	c8 2e       	mov	r12, r24
			uint8_t s = bcd_to_dec(currentTime.hora.Second);
     3d0:	f8 01       	movw	r30, r16
     3d2:	80 81       	ld	r24, Z
     3d4:	0e 94 88 00 	call	0x110	; 0x110 <bcd_to_dec>
     3d8:	b8 2e       	mov	r11, r24
			uint8_t d = bcd_to_dec(currentTime.fecha.Day);
     3da:	f8 01       	movw	r30, r16
     3dc:	83 81       	ldd	r24, Z+3	; 0x03
     3de:	0e 94 88 00 	call	0x110	; 0x110 <bcd_to_dec>
     3e2:	f8 2e       	mov	r15, r24
			uint8_t mo = bcd_to_dec(currentTime.fecha.Month);
     3e4:	f8 01       	movw	r30, r16
     3e6:	84 81       	ldd	r24, Z+4	; 0x04
     3e8:	0e 94 88 00 	call	0x110	; 0x110 <bcd_to_dec>
     3ec:	e8 2e       	mov	r14, r24
			uint8_t y = bcd_to_dec(currentTime.fecha.Year);
     3ee:	f8 01       	movw	r30, r16
     3f0:	85 81       	ldd	r24, Z+5	; 0x05
     3f2:	0e 94 88 00 	call	0x110	; 0x110 <bcd_to_dec>

			sprintf(mensaje, "FECHA: %02d/%02d/%02d HORA:%02d:%02d:%02d\n\r", d, mo, y, h, m, s);
     3f6:	1f 92       	push	r1
     3f8:	bf 92       	push	r11
     3fa:	1f 92       	push	r1
     3fc:	cf 92       	push	r12
     3fe:	1f 92       	push	r1
     400:	df 92       	push	r13
     402:	1f 92       	push	r1
     404:	8f 93       	push	r24
     406:	1f 92       	push	r1
     408:	ef 92       	push	r14
     40a:	1f 92       	push	r1
     40c:	ff 92       	push	r15
     40e:	8f e5       	ldi	r24, 0x5F	; 95
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	9f 93       	push	r25
     414:	8f 93       	push	r24
     416:	8e e9       	ldi	r24, 0x9E	; 158
     418:	92 e0       	ldi	r25, 0x02	; 2
     41a:	9f 93       	push	r25
     41c:	8f 93       	push	r24
     41e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sprintf>
			SerialPort_Send_String(mensaje);
     422:	8e e9       	ldi	r24, 0x9E	; 158
     424:	92 e0       	ldi	r25, 0x02	; 2
     426:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SerialPort_Send_String>
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
		}

		if (alarma_triggered && alarma_count > 0) {
     434:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <alarma_triggered>
     438:	88 23       	and	r24, r24
     43a:	69 f0       	breq	.+26     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     43c:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <__data_end>
     440:	88 23       	and	r24, r24
     442:	49 f0       	breq	.+18     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			SerialPort_Send_String("ALARMA\n\r");
     444:	8b e8       	ldi	r24, 0x8B	; 139
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SerialPort_Send_String>
			alarma_count--;
     44c:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <__data_end>
     450:	81 50       	subi	r24, 0x01	; 1
     452:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <__data_end>
		}

		if (command_ready) {
     456:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <command_ready>
     45a:	88 23       	and	r24, r24
     45c:	09 f4       	brne	.+2      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
     45e:	ee c0       	rjmp	.+476    	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
			command_ready = 0;
     460:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <command_ready>
			RX_Buffer[RX_index] = '\0';
     464:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <RX_index>
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	ee 5f       	subi	r30, 0xFE	; 254
     46c:	fc 4f       	sbci	r31, 0xFC	; 252
     46e:	10 82       	st	Z, r1

			if (strcmp((char*)RX_Buffer, "ON") == 0) {
     470:	64 e9       	ldi	r22, 0x94	; 148
     472:	71 e0       	ldi	r23, 0x01	; 1
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	93 e0       	ldi	r25, 0x03	; 3
     478:	0e 94 52 03 	call	0x6a4	; 0x6a4 <strcmp>
     47c:	89 2b       	or	r24, r25
     47e:	41 f4       	brne	.+16     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
				mostrar_hora = 1;
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <mostrar_hora>
				SerialPort_Send_String("Mostrando hora...\n\r");
     486:	87 e9       	ldi	r24, 0x97	; 151
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SerialPort_Send_String>
     48e:	d4 c0       	rjmp	.+424    	; 0x638 <__EEPROM_REGION_LENGTH__+0x238>

				} else if (strcmp((char*)RX_Buffer, "OFF") == 0) {
     490:	6b ea       	ldi	r22, 0xAB	; 171
     492:	71 e0       	ldi	r23, 0x01	; 1
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	93 e0       	ldi	r25, 0x03	; 3
     498:	0e 94 52 03 	call	0x6a4	; 0x6a4 <strcmp>
     49c:	89 2b       	or	r24, r25
     49e:	39 f4       	brne	.+14     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
				mostrar_hora = 0;
     4a0:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <mostrar_hora>
				SerialPort_Send_String("Hora pausada.\n\r");
     4a4:	8f ea       	ldi	r24, 0xAF	; 175
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SerialPort_Send_String>
     4ac:	c5 c0       	rjmp	.+394    	; 0x638 <__EEPROM_REGION_LENGTH__+0x238>

				} else if (strcmp((char*)RX_Buffer, "SET TIME") == 0) {
     4ae:	6f eb       	ldi	r22, 0xBF	; 191
     4b0:	71 e0       	ldi	r23, 0x01	; 1
     4b2:	82 e0       	ldi	r24, 0x02	; 2
     4b4:	93 e0       	ldi	r25, 0x03	; 3
     4b6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <strcmp>
     4ba:	89 2b       	or	r24, r25
     4bc:	09 f0       	breq	.+2      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
     4be:	64 c0       	rjmp	.+200    	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
				mostrar_hora = 0;
     4c0:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <mostrar_hora>
				SerialPort_Send_String("Ingrese la hora con el formato hh:mm:ss dd/mm/aa\n\r");
     4c4:	88 ec       	ldi	r24, 0xC8	; 200
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SerialPort_Send_String>

				RX_index = 0;
     4cc:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <RX_index>
				while (!command_ready);
     4d0:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <command_ready>
     4d4:	88 23       	and	r24, r24
     4d6:	e1 f3       	breq	.-8      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
				command_ready = 0;
     4d8:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <command_ready>
				RX_Buffer[RX_index] = '\0';
     4dc:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <RX_index>
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	82 e0       	ldi	r24, 0x02	; 2
     4e4:	93 e0       	ldi	r25, 0x03	; 3
     4e6:	ee 5f       	subi	r30, 0xFE	; 254
     4e8:	fc 4f       	sbci	r31, 0xFC	; 252
     4ea:	10 82       	st	Z, r1

				uint8_t hh, mm, ss, dd, mo, yy;
				sscanf((char*)RX_Buffer, "%hhu:%hhu:%hhu %hhu/%hhu/%hhu", &hh, &mm, &ss, &dd, &mo, &yy);
     4ec:	9e 01       	movw	r18, r28
     4ee:	2f 5f       	subi	r18, 0xFF	; 255
     4f0:	3f 4f       	sbci	r19, 0xFF	; 255
     4f2:	3f 93       	push	r19
     4f4:	2f 93       	push	r18
     4f6:	2f 5f       	subi	r18, 0xFF	; 255
     4f8:	3f 4f       	sbci	r19, 0xFF	; 255
     4fa:	3f 93       	push	r19
     4fc:	2f 93       	push	r18
     4fe:	2f 5f       	subi	r18, 0xFF	; 255
     500:	3f 4f       	sbci	r19, 0xFF	; 255
     502:	3f 93       	push	r19
     504:	2f 93       	push	r18
     506:	2f 5f       	subi	r18, 0xFF	; 255
     508:	3f 4f       	sbci	r19, 0xFF	; 255
     50a:	3f 93       	push	r19
     50c:	2f 93       	push	r18
     50e:	2f 5f       	subi	r18, 0xFF	; 255
     510:	3f 4f       	sbci	r19, 0xFF	; 255
     512:	3f 93       	push	r19
     514:	2f 93       	push	r18
     516:	2f 5f       	subi	r18, 0xFF	; 255
     518:	3f 4f       	sbci	r19, 0xFF	; 255
     51a:	3f 93       	push	r19
     51c:	2f 93       	push	r18
     51e:	2b ef       	ldi	r18, 0xFB	; 251
     520:	31 e0       	ldi	r19, 0x01	; 1
     522:	3f 93       	push	r19
     524:	2f 93       	push	r18
     526:	9f 93       	push	r25
     528:	8f 93       	push	r24
     52a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sscanf>

				currentTime.hora.Hour = dec_to_bcd(hh);
     52e:	8e 81       	ldd	r24, Y+6	; 0x06
     530:	0e 94 93 00 	call	0x126	; 0x126 <dec_to_bcd>
     534:	05 e2       	ldi	r16, 0x25	; 37
     536:	13 e0       	ldi	r17, 0x03	; 3
     538:	f8 01       	movw	r30, r16
     53a:	82 83       	std	Z+2, r24	; 0x02
				currentTime.hora.Minute = dec_to_bcd(mm);
     53c:	8d 81       	ldd	r24, Y+5	; 0x05
     53e:	0e 94 93 00 	call	0x126	; 0x126 <dec_to_bcd>
     542:	f8 01       	movw	r30, r16
     544:	81 83       	std	Z+1, r24	; 0x01
				currentTime.hora.Second = dec_to_bcd(ss);
     546:	8c 81       	ldd	r24, Y+4	; 0x04
     548:	0e 94 93 00 	call	0x126	; 0x126 <dec_to_bcd>
     54c:	f8 01       	movw	r30, r16
     54e:	80 83       	st	Z, r24
				currentTime.fecha.Day = dec_to_bcd(dd);
     550:	8b 81       	ldd	r24, Y+3	; 0x03
     552:	0e 94 93 00 	call	0x126	; 0x126 <dec_to_bcd>
     556:	f8 01       	movw	r30, r16
     558:	83 83       	std	Z+3, r24	; 0x03
				currentTime.fecha.Month = dec_to_bcd(mo);
     55a:	8a 81       	ldd	r24, Y+2	; 0x02
     55c:	0e 94 93 00 	call	0x126	; 0x126 <dec_to_bcd>
     560:	f8 01       	movw	r30, r16
     562:	84 83       	std	Z+4, r24	; 0x04
				currentTime.fecha.Year = dec_to_bcd(yy);
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	0e 94 93 00 	call	0x126	; 0x126 <dec_to_bcd>
     56a:	f8 01       	movw	r30, r16
     56c:	85 83       	std	Z+5, r24	; 0x05
				RTC_SetTime(&currentTime);
     56e:	c8 01       	movw	r24, r16
     570:	0e 94 33 01 	call	0x266	; 0x266 <RTC_SetTime>
				SerialPort_Send_String("Hora seteada.\n\r");
     574:	89 e1       	ldi	r24, 0x19	; 25
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SerialPort_Send_String>
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	de bf       	out	0x3e, r29	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	cd bf       	out	0x3d, r28	; 61
     586:	58 c0       	rjmp	.+176    	; 0x638 <__EEPROM_REGION_LENGTH__+0x238>

				} else if (strcmp((char*)RX_Buffer, "SET ALARM") == 0) {
     588:	69 e2       	ldi	r22, 0x29	; 41
     58a:	72 e0       	ldi	r23, 0x02	; 2
     58c:	82 e0       	ldi	r24, 0x02	; 2
     58e:	93 e0       	ldi	r25, 0x03	; 3
     590:	0e 94 52 03 	call	0x6a4	; 0x6a4 <strcmp>
     594:	89 2b       	or	r24, r25
     596:	09 f0       	breq	.+2      	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
     598:	4b c0       	rjmp	.+150    	; 0x630 <__EEPROM_REGION_LENGTH__+0x230>
				SerialPort_Send_String("Ingrese la alarma con el formato hh:mm:ss\n\r");
     59a:	83 e3       	ldi	r24, 0x33	; 51
     59c:	92 e0       	ldi	r25, 0x02	; 2
     59e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SerialPort_Send_String>

				RX_index = 0;
     5a2:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <RX_index>
				while (!command_ready);
     5a6:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <command_ready>
     5aa:	88 23       	and	r24, r24
     5ac:	e1 f3       	breq	.-8      	; 0x5a6 <__EEPROM_REGION_LENGTH__+0x1a6>
				command_ready = 0;
     5ae:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <command_ready>
				RX_Buffer[RX_index] = '\0';
     5b2:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <RX_index>
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	93 e0       	ldi	r25, 0x03	; 3
     5bc:	ee 5f       	subi	r30, 0xFE	; 254
     5be:	fc 4f       	sbci	r31, 0xFC	; 252
     5c0:	10 82       	st	Z, r1

				uint8_t ah, am, as;
				sscanf((char*)RX_Buffer, "%hhu:%hhu:%hhu", &ah, &am, &as);
     5c2:	9e 01       	movw	r18, r28
     5c4:	2f 5f       	subi	r18, 0xFF	; 255
     5c6:	3f 4f       	sbci	r19, 0xFF	; 255
     5c8:	3f 93       	push	r19
     5ca:	2f 93       	push	r18
     5cc:	2f 5f       	subi	r18, 0xFF	; 255
     5ce:	3f 4f       	sbci	r19, 0xFF	; 255
     5d0:	3f 93       	push	r19
     5d2:	2f 93       	push	r18
     5d4:	2f 5f       	subi	r18, 0xFF	; 255
     5d6:	3f 4f       	sbci	r19, 0xFF	; 255
     5d8:	3f 93       	push	r19
     5da:	2f 93       	push	r18
     5dc:	2f e5       	ldi	r18, 0x5F	; 95
     5de:	32 e0       	ldi	r19, 0x02	; 2
     5e0:	3f 93       	push	r19
     5e2:	2f 93       	push	r18
     5e4:	9f 93       	push	r25
     5e6:	8f 93       	push	r24
     5e8:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sscanf>

				alarma.Hour = dec_to_bcd(ah);
     5ec:	8b 81       	ldd	r24, Y+3	; 0x03
     5ee:	0e 94 93 00 	call	0x126	; 0x126 <dec_to_bcd>
     5f2:	02 e2       	ldi	r16, 0x22	; 34
     5f4:	13 e0       	ldi	r17, 0x03	; 3
     5f6:	f8 01       	movw	r30, r16
     5f8:	82 83       	std	Z+2, r24	; 0x02
				alarma.Minute = dec_to_bcd(am);
     5fa:	8a 81       	ldd	r24, Y+2	; 0x02
     5fc:	0e 94 93 00 	call	0x126	; 0x126 <dec_to_bcd>
     600:	f8 01       	movw	r30, r16
     602:	81 83       	std	Z+1, r24	; 0x01
				alarma.Second = dec_to_bcd(as);
     604:	89 81       	ldd	r24, Y+1	; 0x01
     606:	0e 94 93 00 	call	0x126	; 0x126 <dec_to_bcd>
     60a:	f8 01       	movw	r30, r16
     60c:	80 83       	st	Z, r24
				alarma_activa = 1;
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <alarma_activa>
				alarma_triggered = 0;
     614:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <alarma_triggered>
				alarma_count = 0;
     618:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <__data_end>
				SerialPort_Send_String("Alarma seteada.\n\r");
     61c:	8e e6       	ldi	r24, 0x6E	; 110
     61e:	92 e0       	ldi	r25, 0x02	; 2
     620:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SerialPort_Send_String>
     624:	0f b6       	in	r0, 0x3f	; 63
     626:	f8 94       	cli
     628:	de bf       	out	0x3e, r29	; 62
     62a:	0f be       	out	0x3f, r0	; 63
     62c:	cd bf       	out	0x3d, r28	; 61
     62e:	04 c0       	rjmp	.+8      	; 0x638 <__EEPROM_REGION_LENGTH__+0x238>

				} else {
				SerialPort_Send_String("Comando desconocido.\n\r");
     630:	80 e8       	ldi	r24, 0x80	; 128
     632:	92 e0       	ldi	r25, 0x02	; 2
     634:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SerialPort_Send_String>
			}

			RX_index = 0;
     638:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <RX_index>
     63c:	9f ef       	ldi	r25, 0xFF	; 255
     63e:	e3 ed       	ldi	r30, 0xD3	; 211
     640:	f0 e3       	ldi	r31, 0x30	; 48
     642:	91 50       	subi	r25, 0x01	; 1
     644:	e0 40       	sbci	r30, 0x00	; 0
     646:	f0 40       	sbci	r31, 0x00	; 0
     648:	e1 f7       	brne	.-8      	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
     64a:	00 c0       	rjmp	.+0      	; 0x64c <__EEPROM_REGION_LENGTH__+0x24c>
     64c:	00 00       	nop
     64e:	96 ce       	rjmp	.-724    	; 0x37c <main+0x4a>

00000650 <__vector_18>:

		_delay_ms(1000);
	}
}

ISR(USART_RX_vect) {
     650:	1f 92       	push	r1
     652:	0f 92       	push	r0
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	0f 92       	push	r0
     658:	11 24       	eor	r1, r1
     65a:	8f 93       	push	r24
     65c:	9f 93       	push	r25
     65e:	ef 93       	push	r30
     660:	ff 93       	push	r31
	char c = UDR0;
     662:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	if (c == '\n' || c == '\r') {
     666:	8a 30       	cpi	r24, 0x0A	; 10
     668:	11 f0       	breq	.+4      	; 0x66e <__vector_18+0x1e>
     66a:	8d 30       	cpi	r24, 0x0D	; 13
     66c:	21 f4       	brne	.+8      	; 0x676 <__vector_18+0x26>
		command_ready = 1;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <command_ready>
     674:	0e c0       	rjmp	.+28     	; 0x692 <__vector_18+0x42>
		} else {
		if (RX_index < sizeof(RX_Buffer) - 1) {
     676:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <RX_index>
     67a:	9f 31       	cpi	r25, 0x1F	; 31
     67c:	50 f4       	brcc	.+20     	; 0x692 <__vector_18+0x42>
			RX_Buffer[RX_index++] = c;
     67e:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <RX_index>
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	9e 0f       	add	r25, r30
     686:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <RX_index>
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	ee 5f       	subi	r30, 0xFE	; 254
     68e:	fc 4f       	sbci	r31, 0xFC	; 252
     690:	80 83       	st	Z, r24
		}
	}
}
     692:	ff 91       	pop	r31
     694:	ef 91       	pop	r30
     696:	9f 91       	pop	r25
     698:	8f 91       	pop	r24
     69a:	0f 90       	pop	r0
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	0f 90       	pop	r0
     6a0:	1f 90       	pop	r1
     6a2:	18 95       	reti

000006a4 <strcmp>:
     6a4:	fb 01       	movw	r30, r22
     6a6:	dc 01       	movw	r26, r24
     6a8:	8d 91       	ld	r24, X+
     6aa:	01 90       	ld	r0, Z+
     6ac:	80 19       	sub	r24, r0
     6ae:	01 10       	cpse	r0, r1
     6b0:	d9 f3       	breq	.-10     	; 0x6a8 <strcmp+0x4>
     6b2:	99 0b       	sbc	r25, r25
     6b4:	08 95       	ret

000006b6 <sprintf>:
     6b6:	ae e0       	ldi	r26, 0x0E	; 14
     6b8:	b0 e0       	ldi	r27, 0x00	; 0
     6ba:	e1 e6       	ldi	r30, 0x61	; 97
     6bc:	f3 e0       	ldi	r31, 0x03	; 3
     6be:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__prologue_saves__+0x1c>
     6c2:	0d 89       	ldd	r16, Y+21	; 0x15
     6c4:	1e 89       	ldd	r17, Y+22	; 0x16
     6c6:	86 e0       	ldi	r24, 0x06	; 6
     6c8:	8c 83       	std	Y+4, r24	; 0x04
     6ca:	1a 83       	std	Y+2, r17	; 0x02
     6cc:	09 83       	std	Y+1, r16	; 0x01
     6ce:	8f ef       	ldi	r24, 0xFF	; 255
     6d0:	9f e7       	ldi	r25, 0x7F	; 127
     6d2:	9e 83       	std	Y+6, r25	; 0x06
     6d4:	8d 83       	std	Y+5, r24	; 0x05
     6d6:	ae 01       	movw	r20, r28
     6d8:	47 5e       	subi	r20, 0xE7	; 231
     6da:	5f 4f       	sbci	r21, 0xFF	; 255
     6dc:	6f 89       	ldd	r22, Y+23	; 0x17
     6de:	78 8d       	ldd	r23, Y+24	; 0x18
     6e0:	ce 01       	movw	r24, r28
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	0e 94 96 03 	call	0x72c	; 0x72c <vfprintf>
     6e8:	ef 81       	ldd	r30, Y+7	; 0x07
     6ea:	f8 85       	ldd	r31, Y+8	; 0x08
     6ec:	e0 0f       	add	r30, r16
     6ee:	f1 1f       	adc	r31, r17
     6f0:	10 82       	st	Z, r1
     6f2:	2e 96       	adiw	r28, 0x0e	; 14
     6f4:	e4 e0       	ldi	r30, 0x04	; 4
     6f6:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <__epilogue_restores__+0x1c>

000006fa <sscanf>:
     6fa:	ae e0       	ldi	r26, 0x0E	; 14
     6fc:	b0 e0       	ldi	r27, 0x00	; 0
     6fe:	e3 e8       	ldi	r30, 0x83	; 131
     700:	f3 e0       	ldi	r31, 0x03	; 3
     702:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__prologue_saves__+0x20>
     706:	85 e0       	ldi	r24, 0x05	; 5
     708:	8c 83       	std	Y+4, r24	; 0x04
     70a:	8b 89       	ldd	r24, Y+19	; 0x13
     70c:	9c 89       	ldd	r25, Y+20	; 0x14
     70e:	9a 83       	std	Y+2, r25	; 0x02
     710:	89 83       	std	Y+1, r24	; 0x01
     712:	ae 01       	movw	r20, r28
     714:	49 5e       	subi	r20, 0xE9	; 233
     716:	5f 4f       	sbci	r21, 0xFF	; 255
     718:	6d 89       	ldd	r22, Y+21	; 0x15
     71a:	7e 89       	ldd	r23, Y+22	; 0x16
     71c:	ce 01       	movw	r24, r28
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	0e 94 13 07 	call	0xe26	; 0xe26 <vfscanf>
     724:	2e 96       	adiw	r28, 0x0e	; 14
     726:	e2 e0       	ldi	r30, 0x02	; 2
     728:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__epilogue_restores__+0x20>

0000072c <vfprintf>:
     72c:	ab e0       	ldi	r26, 0x0B	; 11
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__prologue_saves__>
     738:	6c 01       	movw	r12, r24
     73a:	7b 01       	movw	r14, r22
     73c:	8a 01       	movw	r16, r20
     73e:	fc 01       	movw	r30, r24
     740:	17 82       	std	Z+7, r1	; 0x07
     742:	16 82       	std	Z+6, r1	; 0x06
     744:	83 81       	ldd	r24, Z+3	; 0x03
     746:	81 ff       	sbrs	r24, 1
     748:	cc c1       	rjmp	.+920    	; 0xae2 <__stack+0x1e3>
     74a:	ce 01       	movw	r24, r28
     74c:	01 96       	adiw	r24, 0x01	; 1
     74e:	3c 01       	movw	r6, r24
     750:	f6 01       	movw	r30, r12
     752:	93 81       	ldd	r25, Z+3	; 0x03
     754:	f7 01       	movw	r30, r14
     756:	93 fd       	sbrc	r25, 3
     758:	85 91       	lpm	r24, Z+
     75a:	93 ff       	sbrs	r25, 3
     75c:	81 91       	ld	r24, Z+
     75e:	7f 01       	movw	r14, r30
     760:	88 23       	and	r24, r24
     762:	09 f4       	brne	.+2      	; 0x766 <vfprintf+0x3a>
     764:	ba c1       	rjmp	.+884    	; 0xada <__stack+0x1db>
     766:	85 32       	cpi	r24, 0x25	; 37
     768:	39 f4       	brne	.+14     	; 0x778 <vfprintf+0x4c>
     76a:	93 fd       	sbrc	r25, 3
     76c:	85 91       	lpm	r24, Z+
     76e:	93 ff       	sbrs	r25, 3
     770:	81 91       	ld	r24, Z+
     772:	7f 01       	movw	r14, r30
     774:	85 32       	cpi	r24, 0x25	; 37
     776:	29 f4       	brne	.+10     	; 0x782 <vfprintf+0x56>
     778:	b6 01       	movw	r22, r12
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 8c 08 	call	0x1118	; 0x1118 <fputc>
     780:	e7 cf       	rjmp	.-50     	; 0x750 <vfprintf+0x24>
     782:	91 2c       	mov	r9, r1
     784:	21 2c       	mov	r2, r1
     786:	31 2c       	mov	r3, r1
     788:	ff e1       	ldi	r31, 0x1F	; 31
     78a:	f3 15       	cp	r31, r3
     78c:	d8 f0       	brcs	.+54     	; 0x7c4 <vfprintf+0x98>
     78e:	8b 32       	cpi	r24, 0x2B	; 43
     790:	79 f0       	breq	.+30     	; 0x7b0 <vfprintf+0x84>
     792:	38 f4       	brcc	.+14     	; 0x7a2 <vfprintf+0x76>
     794:	80 32       	cpi	r24, 0x20	; 32
     796:	79 f0       	breq	.+30     	; 0x7b6 <vfprintf+0x8a>
     798:	83 32       	cpi	r24, 0x23	; 35
     79a:	a1 f4       	brne	.+40     	; 0x7c4 <vfprintf+0x98>
     79c:	23 2d       	mov	r18, r3
     79e:	20 61       	ori	r18, 0x10	; 16
     7a0:	1d c0       	rjmp	.+58     	; 0x7dc <vfprintf+0xb0>
     7a2:	8d 32       	cpi	r24, 0x2D	; 45
     7a4:	61 f0       	breq	.+24     	; 0x7be <vfprintf+0x92>
     7a6:	80 33       	cpi	r24, 0x30	; 48
     7a8:	69 f4       	brne	.+26     	; 0x7c4 <vfprintf+0x98>
     7aa:	23 2d       	mov	r18, r3
     7ac:	21 60       	ori	r18, 0x01	; 1
     7ae:	16 c0       	rjmp	.+44     	; 0x7dc <vfprintf+0xb0>
     7b0:	83 2d       	mov	r24, r3
     7b2:	82 60       	ori	r24, 0x02	; 2
     7b4:	38 2e       	mov	r3, r24
     7b6:	e3 2d       	mov	r30, r3
     7b8:	e4 60       	ori	r30, 0x04	; 4
     7ba:	3e 2e       	mov	r3, r30
     7bc:	2a c0       	rjmp	.+84     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     7be:	f3 2d       	mov	r31, r3
     7c0:	f8 60       	ori	r31, 0x08	; 8
     7c2:	1d c0       	rjmp	.+58     	; 0x7fe <vfprintf+0xd2>
     7c4:	37 fc       	sbrc	r3, 7
     7c6:	2d c0       	rjmp	.+90     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     7c8:	20 ed       	ldi	r18, 0xD0	; 208
     7ca:	28 0f       	add	r18, r24
     7cc:	2a 30       	cpi	r18, 0x0A	; 10
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <vfprintf+0xb4>
     7d0:	8e 32       	cpi	r24, 0x2E	; 46
     7d2:	b9 f4       	brne	.+46     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7d4:	36 fc       	sbrc	r3, 6
     7d6:	81 c1       	rjmp	.+770    	; 0xada <__stack+0x1db>
     7d8:	23 2d       	mov	r18, r3
     7da:	20 64       	ori	r18, 0x40	; 64
     7dc:	32 2e       	mov	r3, r18
     7de:	19 c0       	rjmp	.+50     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     7e0:	36 fe       	sbrs	r3, 6
     7e2:	06 c0       	rjmp	.+12     	; 0x7f0 <vfprintf+0xc4>
     7e4:	8a e0       	ldi	r24, 0x0A	; 10
     7e6:	98 9e       	mul	r9, r24
     7e8:	20 0d       	add	r18, r0
     7ea:	11 24       	eor	r1, r1
     7ec:	92 2e       	mov	r9, r18
     7ee:	11 c0       	rjmp	.+34     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     7f0:	ea e0       	ldi	r30, 0x0A	; 10
     7f2:	2e 9e       	mul	r2, r30
     7f4:	20 0d       	add	r18, r0
     7f6:	11 24       	eor	r1, r1
     7f8:	22 2e       	mov	r2, r18
     7fa:	f3 2d       	mov	r31, r3
     7fc:	f0 62       	ori	r31, 0x20	; 32
     7fe:	3f 2e       	mov	r3, r31
     800:	08 c0       	rjmp	.+16     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     802:	8c 36       	cpi	r24, 0x6C	; 108
     804:	21 f4       	brne	.+8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     806:	83 2d       	mov	r24, r3
     808:	80 68       	ori	r24, 0x80	; 128
     80a:	38 2e       	mov	r3, r24
     80c:	02 c0       	rjmp	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     80e:	88 36       	cpi	r24, 0x68	; 104
     810:	41 f4       	brne	.+16     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     812:	f7 01       	movw	r30, r14
     814:	93 fd       	sbrc	r25, 3
     816:	85 91       	lpm	r24, Z+
     818:	93 ff       	sbrs	r25, 3
     81a:	81 91       	ld	r24, Z+
     81c:	7f 01       	movw	r14, r30
     81e:	81 11       	cpse	r24, r1
     820:	b3 cf       	rjmp	.-154    	; 0x788 <vfprintf+0x5c>
     822:	98 2f       	mov	r25, r24
     824:	9f 7d       	andi	r25, 0xDF	; 223
     826:	95 54       	subi	r25, 0x45	; 69
     828:	93 30       	cpi	r25, 0x03	; 3
     82a:	28 f4       	brcc	.+10     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     82c:	0c 5f       	subi	r16, 0xFC	; 252
     82e:	1f 4f       	sbci	r17, 0xFF	; 255
     830:	9f e3       	ldi	r25, 0x3F	; 63
     832:	99 83       	std	Y+1, r25	; 0x01
     834:	0d c0       	rjmp	.+26     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     836:	83 36       	cpi	r24, 0x63	; 99
     838:	31 f0       	breq	.+12     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     83a:	83 37       	cpi	r24, 0x73	; 115
     83c:	71 f0       	breq	.+28     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     83e:	83 35       	cpi	r24, 0x53	; 83
     840:	09 f0       	breq	.+2      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     842:	59 c0       	rjmp	.+178    	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
     844:	21 c0       	rjmp	.+66     	; 0x888 <__DATA_REGION_LENGTH__+0x88>
     846:	f8 01       	movw	r30, r16
     848:	80 81       	ld	r24, Z
     84a:	89 83       	std	Y+1, r24	; 0x01
     84c:	0e 5f       	subi	r16, 0xFE	; 254
     84e:	1f 4f       	sbci	r17, 0xFF	; 255
     850:	88 24       	eor	r8, r8
     852:	83 94       	inc	r8
     854:	91 2c       	mov	r9, r1
     856:	53 01       	movw	r10, r6
     858:	13 c0       	rjmp	.+38     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
     85a:	28 01       	movw	r4, r16
     85c:	f2 e0       	ldi	r31, 0x02	; 2
     85e:	4f 0e       	add	r4, r31
     860:	51 1c       	adc	r5, r1
     862:	f8 01       	movw	r30, r16
     864:	a0 80       	ld	r10, Z
     866:	b1 80       	ldd	r11, Z+1	; 0x01
     868:	36 fe       	sbrs	r3, 6
     86a:	03 c0       	rjmp	.+6      	; 0x872 <__DATA_REGION_LENGTH__+0x72>
     86c:	69 2d       	mov	r22, r9
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	02 c0       	rjmp	.+4      	; 0x876 <__DATA_REGION_LENGTH__+0x76>
     872:	6f ef       	ldi	r22, 0xFF	; 255
     874:	7f ef       	ldi	r23, 0xFF	; 255
     876:	c5 01       	movw	r24, r10
     878:	0e 94 43 08 	call	0x1086	; 0x1086 <strnlen>
     87c:	4c 01       	movw	r8, r24
     87e:	82 01       	movw	r16, r4
     880:	f3 2d       	mov	r31, r3
     882:	ff 77       	andi	r31, 0x7F	; 127
     884:	3f 2e       	mov	r3, r31
     886:	16 c0       	rjmp	.+44     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     888:	28 01       	movw	r4, r16
     88a:	22 e0       	ldi	r18, 0x02	; 2
     88c:	42 0e       	add	r4, r18
     88e:	51 1c       	adc	r5, r1
     890:	f8 01       	movw	r30, r16
     892:	a0 80       	ld	r10, Z
     894:	b1 80       	ldd	r11, Z+1	; 0x01
     896:	36 fe       	sbrs	r3, 6
     898:	03 c0       	rjmp	.+6      	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     89a:	69 2d       	mov	r22, r9
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
     8a0:	6f ef       	ldi	r22, 0xFF	; 255
     8a2:	7f ef       	ldi	r23, 0xFF	; 255
     8a4:	c5 01       	movw	r24, r10
     8a6:	0e 94 38 08 	call	0x1070	; 0x1070 <strnlen_P>
     8aa:	4c 01       	movw	r8, r24
     8ac:	f3 2d       	mov	r31, r3
     8ae:	f0 68       	ori	r31, 0x80	; 128
     8b0:	3f 2e       	mov	r3, r31
     8b2:	82 01       	movw	r16, r4
     8b4:	33 fc       	sbrc	r3, 3
     8b6:	1b c0       	rjmp	.+54     	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
     8b8:	82 2d       	mov	r24, r2
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	88 16       	cp	r8, r24
     8be:	99 06       	cpc	r9, r25
     8c0:	b0 f4       	brcc	.+44     	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
     8c2:	b6 01       	movw	r22, r12
     8c4:	80 e2       	ldi	r24, 0x20	; 32
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 8c 08 	call	0x1118	; 0x1118 <fputc>
     8cc:	2a 94       	dec	r2
     8ce:	f4 cf       	rjmp	.-24     	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
     8d0:	f5 01       	movw	r30, r10
     8d2:	37 fc       	sbrc	r3, 7
     8d4:	85 91       	lpm	r24, Z+
     8d6:	37 fe       	sbrs	r3, 7
     8d8:	81 91       	ld	r24, Z+
     8da:	5f 01       	movw	r10, r30
     8dc:	b6 01       	movw	r22, r12
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 8c 08 	call	0x1118	; 0x1118 <fputc>
     8e4:	21 10       	cpse	r2, r1
     8e6:	2a 94       	dec	r2
     8e8:	21 e0       	ldi	r18, 0x01	; 1
     8ea:	82 1a       	sub	r8, r18
     8ec:	91 08       	sbc	r9, r1
     8ee:	81 14       	cp	r8, r1
     8f0:	91 04       	cpc	r9, r1
     8f2:	71 f7       	brne	.-36     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
     8f4:	e8 c0       	rjmp	.+464    	; 0xac6 <__stack+0x1c7>
     8f6:	84 36       	cpi	r24, 0x64	; 100
     8f8:	11 f0       	breq	.+4      	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
     8fa:	89 36       	cpi	r24, 0x69	; 105
     8fc:	41 f5       	brne	.+80     	; 0x94e <__stack+0x4f>
     8fe:	f8 01       	movw	r30, r16
     900:	37 fe       	sbrs	r3, 7
     902:	07 c0       	rjmp	.+14     	; 0x912 <__stack+0x13>
     904:	60 81       	ld	r22, Z
     906:	71 81       	ldd	r23, Z+1	; 0x01
     908:	82 81       	ldd	r24, Z+2	; 0x02
     90a:	93 81       	ldd	r25, Z+3	; 0x03
     90c:	0c 5f       	subi	r16, 0xFC	; 252
     90e:	1f 4f       	sbci	r17, 0xFF	; 255
     910:	08 c0       	rjmp	.+16     	; 0x922 <__stack+0x23>
     912:	60 81       	ld	r22, Z
     914:	71 81       	ldd	r23, Z+1	; 0x01
     916:	07 2e       	mov	r0, r23
     918:	00 0c       	add	r0, r0
     91a:	88 0b       	sbc	r24, r24
     91c:	99 0b       	sbc	r25, r25
     91e:	0e 5f       	subi	r16, 0xFE	; 254
     920:	1f 4f       	sbci	r17, 0xFF	; 255
     922:	f3 2d       	mov	r31, r3
     924:	ff 76       	andi	r31, 0x6F	; 111
     926:	3f 2e       	mov	r3, r31
     928:	97 ff       	sbrs	r25, 7
     92a:	09 c0       	rjmp	.+18     	; 0x93e <__stack+0x3f>
     92c:	90 95       	com	r25
     92e:	80 95       	com	r24
     930:	70 95       	com	r23
     932:	61 95       	neg	r22
     934:	7f 4f       	sbci	r23, 0xFF	; 255
     936:	8f 4f       	sbci	r24, 0xFF	; 255
     938:	9f 4f       	sbci	r25, 0xFF	; 255
     93a:	f0 68       	ori	r31, 0x80	; 128
     93c:	3f 2e       	mov	r3, r31
     93e:	2a e0       	ldi	r18, 0x0A	; 10
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	a3 01       	movw	r20, r6
     944:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__ultoa_invert>
     948:	88 2e       	mov	r8, r24
     94a:	86 18       	sub	r8, r6
     94c:	45 c0       	rjmp	.+138    	; 0x9d8 <__stack+0xd9>
     94e:	85 37       	cpi	r24, 0x75	; 117
     950:	31 f4       	brne	.+12     	; 0x95e <__stack+0x5f>
     952:	23 2d       	mov	r18, r3
     954:	2f 7e       	andi	r18, 0xEF	; 239
     956:	b2 2e       	mov	r11, r18
     958:	2a e0       	ldi	r18, 0x0A	; 10
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	25 c0       	rjmp	.+74     	; 0x9a8 <__stack+0xa9>
     95e:	93 2d       	mov	r25, r3
     960:	99 7f       	andi	r25, 0xF9	; 249
     962:	b9 2e       	mov	r11, r25
     964:	8f 36       	cpi	r24, 0x6F	; 111
     966:	c1 f0       	breq	.+48     	; 0x998 <__stack+0x99>
     968:	18 f4       	brcc	.+6      	; 0x970 <__stack+0x71>
     96a:	88 35       	cpi	r24, 0x58	; 88
     96c:	79 f0       	breq	.+30     	; 0x98c <__stack+0x8d>
     96e:	b5 c0       	rjmp	.+362    	; 0xada <__stack+0x1db>
     970:	80 37       	cpi	r24, 0x70	; 112
     972:	19 f0       	breq	.+6      	; 0x97a <__stack+0x7b>
     974:	88 37       	cpi	r24, 0x78	; 120
     976:	21 f0       	breq	.+8      	; 0x980 <__stack+0x81>
     978:	b0 c0       	rjmp	.+352    	; 0xada <__stack+0x1db>
     97a:	e9 2f       	mov	r30, r25
     97c:	e0 61       	ori	r30, 0x10	; 16
     97e:	be 2e       	mov	r11, r30
     980:	b4 fe       	sbrs	r11, 4
     982:	0d c0       	rjmp	.+26     	; 0x99e <__stack+0x9f>
     984:	fb 2d       	mov	r31, r11
     986:	f4 60       	ori	r31, 0x04	; 4
     988:	bf 2e       	mov	r11, r31
     98a:	09 c0       	rjmp	.+18     	; 0x99e <__stack+0x9f>
     98c:	34 fe       	sbrs	r3, 4
     98e:	0a c0       	rjmp	.+20     	; 0x9a4 <__stack+0xa5>
     990:	29 2f       	mov	r18, r25
     992:	26 60       	ori	r18, 0x06	; 6
     994:	b2 2e       	mov	r11, r18
     996:	06 c0       	rjmp	.+12     	; 0x9a4 <__stack+0xa5>
     998:	28 e0       	ldi	r18, 0x08	; 8
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	05 c0       	rjmp	.+10     	; 0x9a8 <__stack+0xa9>
     99e:	20 e1       	ldi	r18, 0x10	; 16
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <__stack+0xa9>
     9a4:	20 e1       	ldi	r18, 0x10	; 16
     9a6:	32 e0       	ldi	r19, 0x02	; 2
     9a8:	f8 01       	movw	r30, r16
     9aa:	b7 fe       	sbrs	r11, 7
     9ac:	07 c0       	rjmp	.+14     	; 0x9bc <__stack+0xbd>
     9ae:	60 81       	ld	r22, Z
     9b0:	71 81       	ldd	r23, Z+1	; 0x01
     9b2:	82 81       	ldd	r24, Z+2	; 0x02
     9b4:	93 81       	ldd	r25, Z+3	; 0x03
     9b6:	0c 5f       	subi	r16, 0xFC	; 252
     9b8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ba:	06 c0       	rjmp	.+12     	; 0x9c8 <__stack+0xc9>
     9bc:	60 81       	ld	r22, Z
     9be:	71 81       	ldd	r23, Z+1	; 0x01
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 5f       	subi	r16, 0xFE	; 254
     9c6:	1f 4f       	sbci	r17, 0xFF	; 255
     9c8:	a3 01       	movw	r20, r6
     9ca:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__ultoa_invert>
     9ce:	88 2e       	mov	r8, r24
     9d0:	86 18       	sub	r8, r6
     9d2:	fb 2d       	mov	r31, r11
     9d4:	ff 77       	andi	r31, 0x7F	; 127
     9d6:	3f 2e       	mov	r3, r31
     9d8:	36 fe       	sbrs	r3, 6
     9da:	0d c0       	rjmp	.+26     	; 0x9f6 <__stack+0xf7>
     9dc:	23 2d       	mov	r18, r3
     9de:	2e 7f       	andi	r18, 0xFE	; 254
     9e0:	a2 2e       	mov	r10, r18
     9e2:	89 14       	cp	r8, r9
     9e4:	58 f4       	brcc	.+22     	; 0x9fc <__stack+0xfd>
     9e6:	34 fe       	sbrs	r3, 4
     9e8:	0b c0       	rjmp	.+22     	; 0xa00 <__stack+0x101>
     9ea:	32 fc       	sbrc	r3, 2
     9ec:	09 c0       	rjmp	.+18     	; 0xa00 <__stack+0x101>
     9ee:	83 2d       	mov	r24, r3
     9f0:	8e 7e       	andi	r24, 0xEE	; 238
     9f2:	a8 2e       	mov	r10, r24
     9f4:	05 c0       	rjmp	.+10     	; 0xa00 <__stack+0x101>
     9f6:	b8 2c       	mov	r11, r8
     9f8:	a3 2c       	mov	r10, r3
     9fa:	03 c0       	rjmp	.+6      	; 0xa02 <__stack+0x103>
     9fc:	b8 2c       	mov	r11, r8
     9fe:	01 c0       	rjmp	.+2      	; 0xa02 <__stack+0x103>
     a00:	b9 2c       	mov	r11, r9
     a02:	a4 fe       	sbrs	r10, 4
     a04:	0f c0       	rjmp	.+30     	; 0xa24 <__stack+0x125>
     a06:	fe 01       	movw	r30, r28
     a08:	e8 0d       	add	r30, r8
     a0a:	f1 1d       	adc	r31, r1
     a0c:	80 81       	ld	r24, Z
     a0e:	80 33       	cpi	r24, 0x30	; 48
     a10:	21 f4       	brne	.+8      	; 0xa1a <__stack+0x11b>
     a12:	9a 2d       	mov	r25, r10
     a14:	99 7e       	andi	r25, 0xE9	; 233
     a16:	a9 2e       	mov	r10, r25
     a18:	09 c0       	rjmp	.+18     	; 0xa2c <__stack+0x12d>
     a1a:	a2 fe       	sbrs	r10, 2
     a1c:	06 c0       	rjmp	.+12     	; 0xa2a <__stack+0x12b>
     a1e:	b3 94       	inc	r11
     a20:	b3 94       	inc	r11
     a22:	04 c0       	rjmp	.+8      	; 0xa2c <__stack+0x12d>
     a24:	8a 2d       	mov	r24, r10
     a26:	86 78       	andi	r24, 0x86	; 134
     a28:	09 f0       	breq	.+2      	; 0xa2c <__stack+0x12d>
     a2a:	b3 94       	inc	r11
     a2c:	a3 fc       	sbrc	r10, 3
     a2e:	11 c0       	rjmp	.+34     	; 0xa52 <__stack+0x153>
     a30:	a0 fe       	sbrs	r10, 0
     a32:	06 c0       	rjmp	.+12     	; 0xa40 <__stack+0x141>
     a34:	b2 14       	cp	r11, r2
     a36:	88 f4       	brcc	.+34     	; 0xa5a <__stack+0x15b>
     a38:	28 0c       	add	r2, r8
     a3a:	92 2c       	mov	r9, r2
     a3c:	9b 18       	sub	r9, r11
     a3e:	0e c0       	rjmp	.+28     	; 0xa5c <__stack+0x15d>
     a40:	b2 14       	cp	r11, r2
     a42:	60 f4       	brcc	.+24     	; 0xa5c <__stack+0x15d>
     a44:	b6 01       	movw	r22, r12
     a46:	80 e2       	ldi	r24, 0x20	; 32
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 8c 08 	call	0x1118	; 0x1118 <fputc>
     a4e:	b3 94       	inc	r11
     a50:	f7 cf       	rjmp	.-18     	; 0xa40 <__stack+0x141>
     a52:	b2 14       	cp	r11, r2
     a54:	18 f4       	brcc	.+6      	; 0xa5c <__stack+0x15d>
     a56:	2b 18       	sub	r2, r11
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <__stack+0x15f>
     a5a:	98 2c       	mov	r9, r8
     a5c:	21 2c       	mov	r2, r1
     a5e:	a4 fe       	sbrs	r10, 4
     a60:	10 c0       	rjmp	.+32     	; 0xa82 <__stack+0x183>
     a62:	b6 01       	movw	r22, r12
     a64:	80 e3       	ldi	r24, 0x30	; 48
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 8c 08 	call	0x1118	; 0x1118 <fputc>
     a6c:	a2 fe       	sbrs	r10, 2
     a6e:	17 c0       	rjmp	.+46     	; 0xa9e <__stack+0x19f>
     a70:	a1 fc       	sbrc	r10, 1
     a72:	03 c0       	rjmp	.+6      	; 0xa7a <__stack+0x17b>
     a74:	88 e7       	ldi	r24, 0x78	; 120
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <__stack+0x17f>
     a7a:	88 e5       	ldi	r24, 0x58	; 88
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	b6 01       	movw	r22, r12
     a80:	0c c0       	rjmp	.+24     	; 0xa9a <__stack+0x19b>
     a82:	8a 2d       	mov	r24, r10
     a84:	86 78       	andi	r24, 0x86	; 134
     a86:	59 f0       	breq	.+22     	; 0xa9e <__stack+0x19f>
     a88:	a1 fe       	sbrs	r10, 1
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <__stack+0x191>
     a8c:	8b e2       	ldi	r24, 0x2B	; 43
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <__stack+0x193>
     a90:	80 e2       	ldi	r24, 0x20	; 32
     a92:	a7 fc       	sbrc	r10, 7
     a94:	8d e2       	ldi	r24, 0x2D	; 45
     a96:	b6 01       	movw	r22, r12
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	0e 94 8c 08 	call	0x1118	; 0x1118 <fputc>
     a9e:	89 14       	cp	r8, r9
     aa0:	38 f4       	brcc	.+14     	; 0xab0 <__stack+0x1b1>
     aa2:	b6 01       	movw	r22, r12
     aa4:	80 e3       	ldi	r24, 0x30	; 48
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 8c 08 	call	0x1118	; 0x1118 <fputc>
     aac:	9a 94       	dec	r9
     aae:	f7 cf       	rjmp	.-18     	; 0xa9e <__stack+0x19f>
     ab0:	8a 94       	dec	r8
     ab2:	f3 01       	movw	r30, r6
     ab4:	e8 0d       	add	r30, r8
     ab6:	f1 1d       	adc	r31, r1
     ab8:	80 81       	ld	r24, Z
     aba:	b6 01       	movw	r22, r12
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 8c 08 	call	0x1118	; 0x1118 <fputc>
     ac2:	81 10       	cpse	r8, r1
     ac4:	f5 cf       	rjmp	.-22     	; 0xab0 <__stack+0x1b1>
     ac6:	22 20       	and	r2, r2
     ac8:	09 f4       	brne	.+2      	; 0xacc <__stack+0x1cd>
     aca:	42 ce       	rjmp	.-892    	; 0x750 <vfprintf+0x24>
     acc:	b6 01       	movw	r22, r12
     ace:	80 e2       	ldi	r24, 0x20	; 32
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 8c 08 	call	0x1118	; 0x1118 <fputc>
     ad6:	2a 94       	dec	r2
     ad8:	f6 cf       	rjmp	.-20     	; 0xac6 <__stack+0x1c7>
     ada:	f6 01       	movw	r30, r12
     adc:	86 81       	ldd	r24, Z+6	; 0x06
     ade:	97 81       	ldd	r25, Z+7	; 0x07
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <__stack+0x1e7>
     ae2:	8f ef       	ldi	r24, 0xFF	; 255
     ae4:	9f ef       	ldi	r25, 0xFF	; 255
     ae6:	2b 96       	adiw	r28, 0x0b	; 11
     ae8:	e2 e1       	ldi	r30, 0x12	; 18
     aea:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__epilogue_restores__>

00000aee <putval>:
     aee:	20 fd       	sbrc	r18, 0
     af0:	09 c0       	rjmp	.+18     	; 0xb04 <putval+0x16>
     af2:	fc 01       	movw	r30, r24
     af4:	23 fd       	sbrc	r18, 3
     af6:	05 c0       	rjmp	.+10     	; 0xb02 <putval+0x14>
     af8:	22 ff       	sbrs	r18, 2
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <putval+0x12>
     afc:	73 83       	std	Z+3, r23	; 0x03
     afe:	62 83       	std	Z+2, r22	; 0x02
     b00:	51 83       	std	Z+1, r21	; 0x01
     b02:	40 83       	st	Z, r20
     b04:	08 95       	ret

00000b06 <mulacc>:
     b06:	44 fd       	sbrc	r20, 4
     b08:	17 c0       	rjmp	.+46     	; 0xb38 <mulacc+0x32>
     b0a:	46 fd       	sbrc	r20, 6
     b0c:	17 c0       	rjmp	.+46     	; 0xb3c <mulacc+0x36>
     b0e:	ab 01       	movw	r20, r22
     b10:	bc 01       	movw	r22, r24
     b12:	da 01       	movw	r26, r20
     b14:	fb 01       	movw	r30, r22
     b16:	aa 0f       	add	r26, r26
     b18:	bb 1f       	adc	r27, r27
     b1a:	ee 1f       	adc	r30, r30
     b1c:	ff 1f       	adc	r31, r31
     b1e:	10 94       	com	r1
     b20:	d1 f7       	brne	.-12     	; 0xb16 <mulacc+0x10>
     b22:	4a 0f       	add	r20, r26
     b24:	5b 1f       	adc	r21, r27
     b26:	6e 1f       	adc	r22, r30
     b28:	7f 1f       	adc	r23, r31
     b2a:	cb 01       	movw	r24, r22
     b2c:	ba 01       	movw	r22, r20
     b2e:	66 0f       	add	r22, r22
     b30:	77 1f       	adc	r23, r23
     b32:	88 1f       	adc	r24, r24
     b34:	99 1f       	adc	r25, r25
     b36:	09 c0       	rjmp	.+18     	; 0xb4a <mulacc+0x44>
     b38:	33 e0       	ldi	r19, 0x03	; 3
     b3a:	01 c0       	rjmp	.+2      	; 0xb3e <mulacc+0x38>
     b3c:	34 e0       	ldi	r19, 0x04	; 4
     b3e:	66 0f       	add	r22, r22
     b40:	77 1f       	adc	r23, r23
     b42:	88 1f       	adc	r24, r24
     b44:	99 1f       	adc	r25, r25
     b46:	31 50       	subi	r19, 0x01	; 1
     b48:	d1 f7       	brne	.-12     	; 0xb3e <mulacc+0x38>
     b4a:	62 0f       	add	r22, r18
     b4c:	71 1d       	adc	r23, r1
     b4e:	81 1d       	adc	r24, r1
     b50:	91 1d       	adc	r25, r1
     b52:	08 95       	ret

00000b54 <skip_spaces>:
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	8c 01       	movw	r16, r24
     b5e:	c8 01       	movw	r24, r16
     b60:	0e 94 4e 08 	call	0x109c	; 0x109c <fgetc>
     b64:	ec 01       	movw	r28, r24
     b66:	97 fd       	sbrc	r25, 7
     b68:	08 c0       	rjmp	.+16     	; 0xb7a <skip_spaces+0x26>
     b6a:	0e 94 24 08 	call	0x1048	; 0x1048 <isspace>
     b6e:	89 2b       	or	r24, r25
     b70:	b1 f7       	brne	.-20     	; 0xb5e <skip_spaces+0xa>
     b72:	b8 01       	movw	r22, r16
     b74:	ce 01       	movw	r24, r28
     b76:	0e 94 c8 08 	call	0x1190	; 0x1190 <ungetc>
     b7a:	ce 01       	movw	r24, r28
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	08 95       	ret

00000b86 <conv_int>:
     b86:	8f 92       	push	r8
     b88:	9f 92       	push	r9
     b8a:	af 92       	push	r10
     b8c:	bf 92       	push	r11
     b8e:	ef 92       	push	r14
     b90:	ff 92       	push	r15
     b92:	0f 93       	push	r16
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	8c 01       	movw	r16, r24
     b9c:	d6 2f       	mov	r29, r22
     b9e:	7a 01       	movw	r14, r20
     ba0:	b2 2e       	mov	r11, r18
     ba2:	0e 94 4e 08 	call	0x109c	; 0x109c <fgetc>
     ba6:	9c 01       	movw	r18, r24
     ba8:	33 27       	eor	r19, r19
     baa:	2b 32       	cpi	r18, 0x2B	; 43
     bac:	31 05       	cpc	r19, r1
     bae:	31 f0       	breq	.+12     	; 0xbbc <conv_int+0x36>
     bb0:	2d 32       	cpi	r18, 0x2D	; 45
     bb2:	31 05       	cpc	r19, r1
     bb4:	61 f4       	brne	.+24     	; 0xbce <conv_int+0x48>
     bb6:	8b 2d       	mov	r24, r11
     bb8:	80 68       	ori	r24, 0x80	; 128
     bba:	b8 2e       	mov	r11, r24
     bbc:	d1 50       	subi	r29, 0x01	; 1
     bbe:	11 f4       	brne	.+4      	; 0xbc4 <conv_int+0x3e>
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	68 c0       	rjmp	.+208    	; 0xc94 <conv_int+0x10e>
     bc4:	c8 01       	movw	r24, r16
     bc6:	0e 94 4e 08 	call	0x109c	; 0x109c <fgetc>
     bca:	97 fd       	sbrc	r25, 7
     bcc:	f9 cf       	rjmp	.-14     	; 0xbc0 <conv_int+0x3a>
     bce:	cb 2d       	mov	r28, r11
     bd0:	cd 7f       	andi	r28, 0xFD	; 253
     bd2:	2b 2d       	mov	r18, r11
     bd4:	20 73       	andi	r18, 0x30	; 48
     bd6:	09 f5       	brne	.+66     	; 0xc1a <conv_int+0x94>
     bd8:	80 33       	cpi	r24, 0x30	; 48
     bda:	f9 f4       	brne	.+62     	; 0xc1a <conv_int+0x94>
     bdc:	aa 24       	eor	r10, r10
     bde:	aa 94       	dec	r10
     be0:	ad 0e       	add	r10, r29
     be2:	09 f4       	brne	.+2      	; 0xbe6 <conv_int+0x60>
     be4:	43 c0       	rjmp	.+134    	; 0xc6c <conv_int+0xe6>
     be6:	c8 01       	movw	r24, r16
     be8:	0e 94 4e 08 	call	0x109c	; 0x109c <fgetc>
     bec:	97 fd       	sbrc	r25, 7
     bee:	3e c0       	rjmp	.+124    	; 0xc6c <conv_int+0xe6>
     bf0:	9c 01       	movw	r18, r24
     bf2:	2f 7d       	andi	r18, 0xDF	; 223
     bf4:	33 27       	eor	r19, r19
     bf6:	28 35       	cpi	r18, 0x58	; 88
     bf8:	31 05       	cpc	r19, r1
     bfa:	49 f4       	brne	.+18     	; 0xc0e <conv_int+0x88>
     bfc:	c2 64       	ori	r28, 0x42	; 66
     bfe:	d2 50       	subi	r29, 0x02	; 2
     c00:	a9 f1       	breq	.+106    	; 0xc6c <conv_int+0xe6>
     c02:	c8 01       	movw	r24, r16
     c04:	0e 94 4e 08 	call	0x109c	; 0x109c <fgetc>
     c08:	97 ff       	sbrs	r25, 7
     c0a:	07 c0       	rjmp	.+14     	; 0xc1a <conv_int+0x94>
     c0c:	2f c0       	rjmp	.+94     	; 0xc6c <conv_int+0xe6>
     c0e:	b6 fe       	sbrs	r11, 6
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <conv_int+0x90>
     c12:	c2 60       	ori	r28, 0x02	; 2
     c14:	01 c0       	rjmp	.+2      	; 0xc18 <conv_int+0x92>
     c16:	c2 61       	ori	r28, 0x12	; 18
     c18:	da 2d       	mov	r29, r10
     c1a:	81 2c       	mov	r8, r1
     c1c:	91 2c       	mov	r9, r1
     c1e:	54 01       	movw	r10, r8
     c20:	20 ed       	ldi	r18, 0xD0	; 208
     c22:	28 0f       	add	r18, r24
     c24:	28 30       	cpi	r18, 0x08	; 8
     c26:	80 f0       	brcs	.+32     	; 0xc48 <conv_int+0xc2>
     c28:	c4 ff       	sbrs	r28, 4
     c2a:	04 c0       	rjmp	.+8      	; 0xc34 <conv_int+0xae>
     c2c:	b8 01       	movw	r22, r16
     c2e:	0e 94 c8 08 	call	0x1190	; 0x1190 <ungetc>
     c32:	19 c0       	rjmp	.+50     	; 0xc66 <conv_int+0xe0>
     c34:	2a 30       	cpi	r18, 0x0A	; 10
     c36:	40 f0       	brcs	.+16     	; 0xc48 <conv_int+0xc2>
     c38:	c6 ff       	sbrs	r28, 6
     c3a:	f8 cf       	rjmp	.-16     	; 0xc2c <conv_int+0xa6>
     c3c:	2f 7d       	andi	r18, 0xDF	; 223
     c3e:	3f ee       	ldi	r19, 0xEF	; 239
     c40:	32 0f       	add	r19, r18
     c42:	36 30       	cpi	r19, 0x06	; 6
     c44:	98 f7       	brcc	.-26     	; 0xc2c <conv_int+0xa6>
     c46:	27 50       	subi	r18, 0x07	; 7
     c48:	4c 2f       	mov	r20, r28
     c4a:	c5 01       	movw	r24, r10
     c4c:	b4 01       	movw	r22, r8
     c4e:	0e 94 83 05 	call	0xb06	; 0xb06 <mulacc>
     c52:	4b 01       	movw	r8, r22
     c54:	5c 01       	movw	r10, r24
     c56:	c2 60       	ori	r28, 0x02	; 2
     c58:	d1 50       	subi	r29, 0x01	; 1
     c5a:	59 f0       	breq	.+22     	; 0xc72 <conv_int+0xec>
     c5c:	c8 01       	movw	r24, r16
     c5e:	0e 94 4e 08 	call	0x109c	; 0x109c <fgetc>
     c62:	97 ff       	sbrs	r25, 7
     c64:	dd cf       	rjmp	.-70     	; 0xc20 <conv_int+0x9a>
     c66:	c1 fd       	sbrc	r28, 1
     c68:	04 c0       	rjmp	.+8      	; 0xc72 <conv_int+0xec>
     c6a:	aa cf       	rjmp	.-172    	; 0xbc0 <conv_int+0x3a>
     c6c:	81 2c       	mov	r8, r1
     c6e:	91 2c       	mov	r9, r1
     c70:	54 01       	movw	r10, r8
     c72:	c7 ff       	sbrs	r28, 7
     c74:	08 c0       	rjmp	.+16     	; 0xc86 <conv_int+0x100>
     c76:	b0 94       	com	r11
     c78:	a0 94       	com	r10
     c7a:	90 94       	com	r9
     c7c:	80 94       	com	r8
     c7e:	81 1c       	adc	r8, r1
     c80:	91 1c       	adc	r9, r1
     c82:	a1 1c       	adc	r10, r1
     c84:	b1 1c       	adc	r11, r1
     c86:	2c 2f       	mov	r18, r28
     c88:	b5 01       	movw	r22, r10
     c8a:	a4 01       	movw	r20, r8
     c8c:	c7 01       	movw	r24, r14
     c8e:	0e 94 77 05 	call	0xaee	; 0xaee <putval>
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	0f 91       	pop	r16
     c9c:	ff 90       	pop	r15
     c9e:	ef 90       	pop	r14
     ca0:	bf 90       	pop	r11
     ca2:	af 90       	pop	r10
     ca4:	9f 90       	pop	r9
     ca6:	8f 90       	pop	r8
     ca8:	08 95       	ret

00000caa <conv_brk>:
     caa:	a0 e2       	ldi	r26, 0x20	; 32
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	eb e5       	ldi	r30, 0x5B	; 91
     cb0:	f6 e0       	ldi	r31, 0x06	; 6
     cb2:	0c 94 45 09 	jmp	0x128a	; 0x128a <__prologue_saves__+0x6>
     cb6:	5c 01       	movw	r10, r24
     cb8:	96 2e       	mov	r9, r22
     cba:	7a 01       	movw	r14, r20
     cbc:	f9 01       	movw	r30, r18
     cbe:	8e 01       	movw	r16, r28
     cc0:	0f 5f       	subi	r16, 0xFF	; 255
     cc2:	1f 4f       	sbci	r17, 0xFF	; 255
     cc4:	68 01       	movw	r12, r16
     cc6:	80 e2       	ldi	r24, 0x20	; 32
     cc8:	d8 01       	movw	r26, r16
     cca:	1d 92       	st	X+, r1
     ccc:	8a 95       	dec	r24
     cce:	e9 f7       	brne	.-6      	; 0xcca <conv_brk+0x20>
     cd0:	d5 01       	movw	r26, r10
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	8c 90       	ld	r8, X
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	61 2c       	mov	r6, r1
     cdc:	71 2c       	mov	r7, r1
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	61 e0       	ldi	r22, 0x01	; 1
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	83 fc       	sbrc	r8, 3
     ce6:	25 91       	lpm	r18, Z+
     ce8:	83 fe       	sbrs	r8, 3
     cea:	21 91       	ld	r18, Z+
     cec:	8f 01       	movw	r16, r30
     cee:	52 2e       	mov	r5, r18
     cf0:	21 11       	cpse	r18, r1
     cf2:	03 c0       	rjmp	.+6      	; 0xcfa <conv_brk+0x50>
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	92 c0       	rjmp	.+292    	; 0xe1e <conv_brk+0x174>
     cfa:	2e 35       	cpi	r18, 0x5E	; 94
     cfc:	11 f4       	brne	.+4      	; 0xd02 <conv_brk+0x58>
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	51 f1       	breq	.+84     	; 0xd56 <conv_brk+0xac>
     d02:	43 2f       	mov	r20, r19
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	48 17       	cp	r20, r24
     d08:	59 07       	cpc	r21, r25
     d0a:	3c f4       	brge	.+14     	; 0xd1a <conv_brk+0x70>
     d0c:	2d 35       	cpi	r18, 0x5D	; 93
     d0e:	59 f1       	breq	.+86     	; 0xd66 <conv_brk+0xbc>
     d10:	2d 32       	cpi	r18, 0x2D	; 45
     d12:	19 f4       	brne	.+6      	; 0xd1a <conv_brk+0x70>
     d14:	77 20       	and	r7, r7
     d16:	09 f1       	breq	.+66     	; 0xd5a <conv_brk+0xb0>
     d18:	03 c0       	rjmp	.+6      	; 0xd20 <conv_brk+0x76>
     d1a:	77 20       	and	r7, r7
     d1c:	09 f4       	brne	.+2      	; 0xd20 <conv_brk+0x76>
     d1e:	6a c0       	rjmp	.+212    	; 0xdf4 <conv_brk+0x14a>
     d20:	45 2d       	mov	r20, r5
     d22:	46 95       	lsr	r20
     d24:	46 95       	lsr	r20
     d26:	46 95       	lsr	r20
     d28:	d6 01       	movw	r26, r12
     d2a:	a4 0f       	add	r26, r20
     d2c:	b1 1d       	adc	r27, r1
     d2e:	45 2d       	mov	r20, r5
     d30:	47 70       	andi	r20, 0x07	; 7
     d32:	8b 01       	movw	r16, r22
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <conv_brk+0x90>
     d36:	00 0f       	add	r16, r16
     d38:	11 1f       	adc	r17, r17
     d3a:	4a 95       	dec	r20
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <conv_brk+0x8c>
     d3e:	a8 01       	movw	r20, r16
     d40:	5c 91       	ld	r21, X
     d42:	45 2b       	or	r20, r21
     d44:	4c 93       	st	X, r20
     d46:	65 14       	cp	r6, r5
     d48:	59 f0       	breq	.+22     	; 0xd60 <conv_brk+0xb6>
     d4a:	56 14       	cp	r5, r6
     d4c:	10 f4       	brcc	.+4      	; 0xd52 <conv_brk+0xa8>
     d4e:	53 94       	inc	r5
     d50:	e7 cf       	rjmp	.-50     	; 0xd20 <conv_brk+0x76>
     d52:	5a 94       	dec	r5
     d54:	e5 cf       	rjmp	.-54     	; 0xd20 <conv_brk+0x76>
     d56:	31 e0       	ldi	r19, 0x01	; 1
     d58:	04 c0       	rjmp	.+8      	; 0xd62 <conv_brk+0xb8>
     d5a:	77 24       	eor	r7, r7
     d5c:	73 94       	inc	r7
     d5e:	01 c0       	rjmp	.+2      	; 0xd62 <conv_brk+0xb8>
     d60:	71 2c       	mov	r7, r1
     d62:	01 96       	adiw	r24, 0x01	; 1
     d64:	bf cf       	rjmp	.-130    	; 0xce4 <conv_brk+0x3a>
     d66:	77 20       	and	r7, r7
     d68:	19 f0       	breq	.+6      	; 0xd70 <conv_brk+0xc6>
     d6a:	8e 81       	ldd	r24, Y+6	; 0x06
     d6c:	80 62       	ori	r24, 0x20	; 32
     d6e:	8e 83       	std	Y+6, r24	; 0x06
     d70:	31 11       	cpse	r19, r1
     d72:	03 c0       	rjmp	.+6      	; 0xd7a <conv_brk+0xd0>
     d74:	88 24       	eor	r8, r8
     d76:	83 94       	inc	r8
     d78:	17 c0       	rjmp	.+46     	; 0xda8 <conv_brk+0xfe>
     d7a:	f6 01       	movw	r30, r12
     d7c:	9e 01       	movw	r18, r28
     d7e:	2f 5d       	subi	r18, 0xDF	; 223
     d80:	3f 4f       	sbci	r19, 0xFF	; 255
     d82:	80 81       	ld	r24, Z
     d84:	80 95       	com	r24
     d86:	81 93       	st	Z+, r24
     d88:	2e 17       	cp	r18, r30
     d8a:	3f 07       	cpc	r19, r31
     d8c:	d1 f7       	brne	.-12     	; 0xd82 <conv_brk+0xd8>
     d8e:	f2 cf       	rjmp	.-28     	; 0xd74 <conv_brk+0xca>
     d90:	e1 14       	cp	r14, r1
     d92:	f1 04       	cpc	r15, r1
     d94:	29 f0       	breq	.+10     	; 0xda0 <conv_brk+0xf6>
     d96:	d7 01       	movw	r26, r14
     d98:	8c 93       	st	X, r24
     d9a:	f7 01       	movw	r30, r14
     d9c:	31 96       	adiw	r30, 0x01	; 1
     d9e:	7f 01       	movw	r14, r30
     da0:	9a 94       	dec	r9
     da2:	81 2c       	mov	r8, r1
     da4:	99 20       	and	r9, r9
     da6:	f9 f0       	breq	.+62     	; 0xde6 <conv_brk+0x13c>
     da8:	c5 01       	movw	r24, r10
     daa:	0e 94 4e 08 	call	0x109c	; 0x109c <fgetc>
     dae:	97 fd       	sbrc	r25, 7
     db0:	18 c0       	rjmp	.+48     	; 0xde2 <conv_brk+0x138>
     db2:	fc 01       	movw	r30, r24
     db4:	ff 27       	eor	r31, r31
     db6:	23 e0       	ldi	r18, 0x03	; 3
     db8:	f5 95       	asr	r31
     dba:	e7 95       	ror	r30
     dbc:	2a 95       	dec	r18
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <conv_brk+0x10e>
     dc0:	ec 0d       	add	r30, r12
     dc2:	fd 1d       	adc	r31, r13
     dc4:	20 81       	ld	r18, Z
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	ac 01       	movw	r20, r24
     dca:	47 70       	andi	r20, 0x07	; 7
     dcc:	55 27       	eor	r21, r21
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <conv_brk+0x12a>
     dd0:	35 95       	asr	r19
     dd2:	27 95       	ror	r18
     dd4:	4a 95       	dec	r20
     dd6:	e2 f7       	brpl	.-8      	; 0xdd0 <conv_brk+0x126>
     dd8:	20 fd       	sbrc	r18, 0
     dda:	da cf       	rjmp	.-76     	; 0xd90 <conv_brk+0xe6>
     ddc:	b5 01       	movw	r22, r10
     dde:	0e 94 c8 08 	call	0x1190	; 0x1190 <ungetc>
     de2:	81 10       	cpse	r8, r1
     de4:	87 cf       	rjmp	.-242    	; 0xcf4 <conv_brk+0x4a>
     de6:	e1 14       	cp	r14, r1
     de8:	f1 04       	cpc	r15, r1
     dea:	11 f0       	breq	.+4      	; 0xdf0 <conv_brk+0x146>
     dec:	d7 01       	movw	r26, r14
     dee:	1c 92       	st	X, r1
     df0:	c8 01       	movw	r24, r16
     df2:	15 c0       	rjmp	.+42     	; 0xe1e <conv_brk+0x174>
     df4:	42 2f       	mov	r20, r18
     df6:	46 95       	lsr	r20
     df8:	46 95       	lsr	r20
     dfa:	46 95       	lsr	r20
     dfc:	d6 01       	movw	r26, r12
     dfe:	a4 0f       	add	r26, r20
     e00:	b1 1d       	adc	r27, r1
     e02:	42 2f       	mov	r20, r18
     e04:	47 70       	andi	r20, 0x07	; 7
     e06:	8b 01       	movw	r16, r22
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <conv_brk+0x164>
     e0a:	00 0f       	add	r16, r16
     e0c:	11 1f       	adc	r17, r17
     e0e:	4a 95       	dec	r20
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <conv_brk+0x160>
     e12:	a8 01       	movw	r20, r16
     e14:	5c 91       	ld	r21, X
     e16:	45 2b       	or	r20, r21
     e18:	4c 93       	st	X, r20
     e1a:	62 2e       	mov	r6, r18
     e1c:	a2 cf       	rjmp	.-188    	; 0xd62 <conv_brk+0xb8>
     e1e:	a0 96       	adiw	r28, 0x20	; 32
     e20:	ef e0       	ldi	r30, 0x0F	; 15
     e22:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__epilogue_restores__+0x6>

00000e26 <vfscanf>:
     e26:	a0 e0       	ldi	r26, 0x00	; 0
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e9 e1       	ldi	r30, 0x19	; 25
     e2c:	f7 e0       	ldi	r31, 0x07	; 7
     e2e:	0c 94 45 09 	jmp	0x128a	; 0x128a <__prologue_saves__+0x6>
     e32:	6c 01       	movw	r12, r24
     e34:	eb 01       	movw	r28, r22
     e36:	5a 01       	movw	r10, r20
     e38:	fc 01       	movw	r30, r24
     e3a:	17 82       	std	Z+7, r1	; 0x07
     e3c:	16 82       	std	Z+6, r1	; 0x06
     e3e:	51 2c       	mov	r5, r1
     e40:	f6 01       	movw	r30, r12
     e42:	e3 80       	ldd	r14, Z+3	; 0x03
     e44:	fe 01       	movw	r30, r28
     e46:	e3 fc       	sbrc	r14, 3
     e48:	85 91       	lpm	r24, Z+
     e4a:	e3 fe       	sbrs	r14, 3
     e4c:	81 91       	ld	r24, Z+
     e4e:	18 2f       	mov	r17, r24
     e50:	ef 01       	movw	r28, r30
     e52:	88 23       	and	r24, r24
     e54:	09 f4       	brne	.+2      	; 0xe58 <vfscanf+0x32>
     e56:	ee c0       	rjmp	.+476    	; 0x1034 <vfscanf+0x20e>
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 24 08 	call	0x1048	; 0x1048 <isspace>
     e5e:	89 2b       	or	r24, r25
     e60:	21 f0       	breq	.+8      	; 0xe6a <vfscanf+0x44>
     e62:	c6 01       	movw	r24, r12
     e64:	0e 94 aa 05 	call	0xb54	; 0xb54 <skip_spaces>
     e68:	eb cf       	rjmp	.-42     	; 0xe40 <vfscanf+0x1a>
     e6a:	15 32       	cpi	r17, 0x25	; 37
     e6c:	41 f4       	brne	.+16     	; 0xe7e <vfscanf+0x58>
     e6e:	fe 01       	movw	r30, r28
     e70:	e3 fc       	sbrc	r14, 3
     e72:	15 91       	lpm	r17, Z+
     e74:	e3 fe       	sbrs	r14, 3
     e76:	11 91       	ld	r17, Z+
     e78:	ef 01       	movw	r28, r30
     e7a:	15 32       	cpi	r17, 0x25	; 37
     e7c:	81 f4       	brne	.+32     	; 0xe9e <vfscanf+0x78>
     e7e:	c6 01       	movw	r24, r12
     e80:	0e 94 4e 08 	call	0x109c	; 0x109c <fgetc>
     e84:	97 fd       	sbrc	r25, 7
     e86:	d4 c0       	rjmp	.+424    	; 0x1030 <vfscanf+0x20a>
     e88:	41 2f       	mov	r20, r17
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	9c 01       	movw	r18, r24
     e8e:	33 27       	eor	r19, r19
     e90:	24 17       	cp	r18, r20
     e92:	35 07       	cpc	r19, r21
     e94:	a9 f2       	breq	.-86     	; 0xe40 <vfscanf+0x1a>
     e96:	b6 01       	movw	r22, r12
     e98:	0e 94 c8 08 	call	0x1190	; 0x1190 <ungetc>
     e9c:	cb c0       	rjmp	.+406    	; 0x1034 <vfscanf+0x20e>
     e9e:	1a 32       	cpi	r17, 0x2A	; 42
     ea0:	39 f4       	brne	.+14     	; 0xeb0 <vfscanf+0x8a>
     ea2:	e3 fc       	sbrc	r14, 3
     ea4:	15 91       	lpm	r17, Z+
     ea6:	e3 fe       	sbrs	r14, 3
     ea8:	11 91       	ld	r17, Z+
     eaa:	ef 01       	movw	r28, r30
     eac:	01 e0       	ldi	r16, 0x01	; 1
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <vfscanf+0x8c>
     eb0:	00 e0       	ldi	r16, 0x00	; 0
     eb2:	f1 2c       	mov	r15, r1
     eb4:	20 ed       	ldi	r18, 0xD0	; 208
     eb6:	21 0f       	add	r18, r17
     eb8:	2a 30       	cpi	r18, 0x0A	; 10
     eba:	80 f4       	brcc	.+32     	; 0xedc <vfscanf+0xb6>
     ebc:	02 60       	ori	r16, 0x02	; 2
     ebe:	6f 2d       	mov	r22, r15
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	40 e2       	ldi	r20, 0x20	; 32
     ec8:	0e 94 83 05 	call	0xb06	; 0xb06 <mulacc>
     ecc:	f6 2e       	mov	r15, r22
     ece:	fe 01       	movw	r30, r28
     ed0:	e3 fc       	sbrc	r14, 3
     ed2:	15 91       	lpm	r17, Z+
     ed4:	e3 fe       	sbrs	r14, 3
     ed6:	11 91       	ld	r17, Z+
     ed8:	ef 01       	movw	r28, r30
     eda:	ec cf       	rjmp	.-40     	; 0xeb4 <vfscanf+0x8e>
     edc:	01 ff       	sbrs	r16, 1
     ede:	03 c0       	rjmp	.+6      	; 0xee6 <vfscanf+0xc0>
     ee0:	f1 10       	cpse	r15, r1
     ee2:	03 c0       	rjmp	.+6      	; 0xeea <vfscanf+0xc4>
     ee4:	a7 c0       	rjmp	.+334    	; 0x1034 <vfscanf+0x20e>
     ee6:	ff 24       	eor	r15, r15
     ee8:	fa 94       	dec	r15
     eea:	18 36       	cpi	r17, 0x68	; 104
     eec:	19 f0       	breq	.+6      	; 0xef4 <vfscanf+0xce>
     eee:	1c 36       	cpi	r17, 0x6C	; 108
     ef0:	51 f0       	breq	.+20     	; 0xf06 <vfscanf+0xe0>
     ef2:	10 c0       	rjmp	.+32     	; 0xf14 <vfscanf+0xee>
     ef4:	fe 01       	movw	r30, r28
     ef6:	e3 fc       	sbrc	r14, 3
     ef8:	15 91       	lpm	r17, Z+
     efa:	e3 fe       	sbrs	r14, 3
     efc:	11 91       	ld	r17, Z+
     efe:	ef 01       	movw	r28, r30
     f00:	18 36       	cpi	r17, 0x68	; 104
     f02:	41 f4       	brne	.+16     	; 0xf14 <vfscanf+0xee>
     f04:	08 60       	ori	r16, 0x08	; 8
     f06:	04 60       	ori	r16, 0x04	; 4
     f08:	fe 01       	movw	r30, r28
     f0a:	e3 fc       	sbrc	r14, 3
     f0c:	15 91       	lpm	r17, Z+
     f0e:	e3 fe       	sbrs	r14, 3
     f10:	11 91       	ld	r17, Z+
     f12:	ef 01       	movw	r28, r30
     f14:	11 23       	and	r17, r17
     f16:	09 f4       	brne	.+2      	; 0xf1a <vfscanf+0xf4>
     f18:	8d c0       	rjmp	.+282    	; 0x1034 <vfscanf+0x20e>
     f1a:	61 2f       	mov	r22, r17
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	88 e6       	ldi	r24, 0x68	; 104
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 2d 08 	call	0x105a	; 0x105a <strchr_P>
     f26:	89 2b       	or	r24, r25
     f28:	09 f4       	brne	.+2      	; 0xf2c <vfscanf+0x106>
     f2a:	84 c0       	rjmp	.+264    	; 0x1034 <vfscanf+0x20e>
     f2c:	00 fd       	sbrc	r16, 0
     f2e:	07 c0       	rjmp	.+14     	; 0xf3e <vfscanf+0x118>
     f30:	f5 01       	movw	r30, r10
     f32:	80 80       	ld	r8, Z
     f34:	91 80       	ldd	r9, Z+1	; 0x01
     f36:	c5 01       	movw	r24, r10
     f38:	02 96       	adiw	r24, 0x02	; 2
     f3a:	5c 01       	movw	r10, r24
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <vfscanf+0x11c>
     f3e:	81 2c       	mov	r8, r1
     f40:	91 2c       	mov	r9, r1
     f42:	1e 36       	cpi	r17, 0x6E	; 110
     f44:	51 f4       	brne	.+20     	; 0xf5a <vfscanf+0x134>
     f46:	f6 01       	movw	r30, r12
     f48:	46 81       	ldd	r20, Z+6	; 0x06
     f4a:	57 81       	ldd	r21, Z+7	; 0x07
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	20 2f       	mov	r18, r16
     f52:	c4 01       	movw	r24, r8
     f54:	0e 94 77 05 	call	0xaee	; 0xaee <putval>
     f58:	73 cf       	rjmp	.-282    	; 0xe40 <vfscanf+0x1a>
     f5a:	13 36       	cpi	r17, 0x63	; 99
     f5c:	a9 f4       	brne	.+42     	; 0xf88 <vfscanf+0x162>
     f5e:	01 fd       	sbrc	r16, 1
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <vfscanf+0x140>
     f62:	ff 24       	eor	r15, r15
     f64:	f3 94       	inc	r15
     f66:	c6 01       	movw	r24, r12
     f68:	0e 94 4e 08 	call	0x109c	; 0x109c <fgetc>
     f6c:	97 fd       	sbrc	r25, 7
     f6e:	60 c0       	rjmp	.+192    	; 0x1030 <vfscanf+0x20a>
     f70:	81 14       	cp	r8, r1
     f72:	91 04       	cpc	r9, r1
     f74:	29 f0       	breq	.+10     	; 0xf80 <vfscanf+0x15a>
     f76:	f4 01       	movw	r30, r8
     f78:	80 83       	st	Z, r24
     f7a:	c4 01       	movw	r24, r8
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	4c 01       	movw	r8, r24
     f80:	fa 94       	dec	r15
     f82:	f1 10       	cpse	r15, r1
     f84:	f0 cf       	rjmp	.-32     	; 0xf66 <vfscanf+0x140>
     f86:	50 c0       	rjmp	.+160    	; 0x1028 <vfscanf+0x202>
     f88:	1b 35       	cpi	r17, 0x5B	; 91
     f8a:	59 f4       	brne	.+22     	; 0xfa2 <vfscanf+0x17c>
     f8c:	9e 01       	movw	r18, r28
     f8e:	a4 01       	movw	r20, r8
     f90:	6f 2d       	mov	r22, r15
     f92:	c6 01       	movw	r24, r12
     f94:	0e 94 55 06 	call	0xcaa	; 0xcaa <conv_brk>
     f98:	ec 01       	movw	r28, r24
     f9a:	89 2b       	or	r24, r25
     f9c:	09 f0       	breq	.+2      	; 0xfa0 <vfscanf+0x17a>
     f9e:	44 c0       	rjmp	.+136    	; 0x1028 <vfscanf+0x202>
     fa0:	3e c0       	rjmp	.+124    	; 0x101e <vfscanf+0x1f8>
     fa2:	c6 01       	movw	r24, r12
     fa4:	0e 94 aa 05 	call	0xb54	; 0xb54 <skip_spaces>
     fa8:	97 fd       	sbrc	r25, 7
     faa:	42 c0       	rjmp	.+132    	; 0x1030 <vfscanf+0x20a>
     fac:	1f 36       	cpi	r17, 0x6F	; 111
     fae:	61 f1       	breq	.+88     	; 0x1008 <vfscanf+0x1e2>
     fb0:	28 f4       	brcc	.+10     	; 0xfbc <vfscanf+0x196>
     fb2:	14 36       	cpi	r17, 0x64	; 100
     fb4:	39 f1       	breq	.+78     	; 0x1004 <vfscanf+0x1de>
     fb6:	19 36       	cpi	r17, 0x69	; 105
     fb8:	51 f1       	breq	.+84     	; 0x100e <vfscanf+0x1e8>
     fba:	28 c0       	rjmp	.+80     	; 0x100c <vfscanf+0x1e6>
     fbc:	13 37       	cpi	r17, 0x73	; 115
     fbe:	71 f0       	breq	.+28     	; 0xfdc <vfscanf+0x1b6>
     fc0:	15 37       	cpi	r17, 0x75	; 117
     fc2:	01 f1       	breq	.+64     	; 0x1004 <vfscanf+0x1de>
     fc4:	23 c0       	rjmp	.+70     	; 0x100c <vfscanf+0x1e6>
     fc6:	81 14       	cp	r8, r1
     fc8:	91 04       	cpc	r9, r1
     fca:	29 f0       	breq	.+10     	; 0xfd6 <vfscanf+0x1b0>
     fcc:	f4 01       	movw	r30, r8
     fce:	60 82       	st	Z, r6
     fd0:	c4 01       	movw	r24, r8
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	4c 01       	movw	r8, r24
     fd6:	fa 94       	dec	r15
     fd8:	ff 20       	and	r15, r15
     fda:	71 f0       	breq	.+28     	; 0xff8 <vfscanf+0x1d2>
     fdc:	c6 01       	movw	r24, r12
     fde:	0e 94 4e 08 	call	0x109c	; 0x109c <fgetc>
     fe2:	3c 01       	movw	r6, r24
     fe4:	97 fd       	sbrc	r25, 7
     fe6:	08 c0       	rjmp	.+16     	; 0xff8 <vfscanf+0x1d2>
     fe8:	0e 94 24 08 	call	0x1048	; 0x1048 <isspace>
     fec:	89 2b       	or	r24, r25
     fee:	59 f3       	breq	.-42     	; 0xfc6 <vfscanf+0x1a0>
     ff0:	b6 01       	movw	r22, r12
     ff2:	c3 01       	movw	r24, r6
     ff4:	0e 94 c8 08 	call	0x1190	; 0x1190 <ungetc>
     ff8:	81 14       	cp	r8, r1
     ffa:	91 04       	cpc	r9, r1
     ffc:	a9 f0       	breq	.+42     	; 0x1028 <vfscanf+0x202>
     ffe:	f4 01       	movw	r30, r8
    1000:	10 82       	st	Z, r1
    1002:	12 c0       	rjmp	.+36     	; 0x1028 <vfscanf+0x202>
    1004:	00 62       	ori	r16, 0x20	; 32
    1006:	03 c0       	rjmp	.+6      	; 0x100e <vfscanf+0x1e8>
    1008:	00 61       	ori	r16, 0x10	; 16
    100a:	01 c0       	rjmp	.+2      	; 0x100e <vfscanf+0x1e8>
    100c:	00 64       	ori	r16, 0x40	; 64
    100e:	20 2f       	mov	r18, r16
    1010:	a4 01       	movw	r20, r8
    1012:	6f 2d       	mov	r22, r15
    1014:	c6 01       	movw	r24, r12
    1016:	0e 94 c3 05 	call	0xb86	; 0xb86 <conv_int>
    101a:	81 11       	cpse	r24, r1
    101c:	05 c0       	rjmp	.+10     	; 0x1028 <vfscanf+0x202>
    101e:	f6 01       	movw	r30, r12
    1020:	83 81       	ldd	r24, Z+3	; 0x03
    1022:	80 73       	andi	r24, 0x30	; 48
    1024:	29 f4       	brne	.+10     	; 0x1030 <vfscanf+0x20a>
    1026:	06 c0       	rjmp	.+12     	; 0x1034 <vfscanf+0x20e>
    1028:	00 fd       	sbrc	r16, 0
    102a:	0a cf       	rjmp	.-492    	; 0xe40 <vfscanf+0x1a>
    102c:	53 94       	inc	r5
    102e:	08 cf       	rjmp	.-496    	; 0xe40 <vfscanf+0x1a>
    1030:	55 20       	and	r5, r5
    1032:	19 f0       	breq	.+6      	; 0x103a <vfscanf+0x214>
    1034:	85 2d       	mov	r24, r5
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 c0       	rjmp	.+4      	; 0x103e <vfscanf+0x218>
    103a:	8f ef       	ldi	r24, 0xFF	; 255
    103c:	9f ef       	ldi	r25, 0xFF	; 255
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	ef e0       	ldi	r30, 0x0F	; 15
    1044:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__epilogue_restores__+0x6>

00001048 <isspace>:
    1048:	91 11       	cpse	r25, r1
    104a:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__ctype_isfalse>
    104e:	80 32       	cpi	r24, 0x20	; 32
    1050:	19 f0       	breq	.+6      	; 0x1058 <isspace+0x10>
    1052:	89 50       	subi	r24, 0x09	; 9
    1054:	85 50       	subi	r24, 0x05	; 5
    1056:	c8 f7       	brcc	.-14     	; 0x104a <isspace+0x2>
    1058:	08 95       	ret

0000105a <strchr_P>:
    105a:	fc 01       	movw	r30, r24
    105c:	05 90       	lpm	r0, Z+
    105e:	06 16       	cp	r0, r22
    1060:	21 f0       	breq	.+8      	; 0x106a <strchr_P+0x10>
    1062:	00 20       	and	r0, r0
    1064:	d9 f7       	brne	.-10     	; 0x105c <strchr_P+0x2>
    1066:	c0 01       	movw	r24, r0
    1068:	08 95       	ret
    106a:	31 97       	sbiw	r30, 0x01	; 1
    106c:	cf 01       	movw	r24, r30
    106e:	08 95       	ret

00001070 <strnlen_P>:
    1070:	fc 01       	movw	r30, r24
    1072:	05 90       	lpm	r0, Z+
    1074:	61 50       	subi	r22, 0x01	; 1
    1076:	70 40       	sbci	r23, 0x00	; 0
    1078:	01 10       	cpse	r0, r1
    107a:	d8 f7       	brcc	.-10     	; 0x1072 <strnlen_P+0x2>
    107c:	80 95       	com	r24
    107e:	90 95       	com	r25
    1080:	8e 0f       	add	r24, r30
    1082:	9f 1f       	adc	r25, r31
    1084:	08 95       	ret

00001086 <strnlen>:
    1086:	fc 01       	movw	r30, r24
    1088:	61 50       	subi	r22, 0x01	; 1
    108a:	70 40       	sbci	r23, 0x00	; 0
    108c:	01 90       	ld	r0, Z+
    108e:	01 10       	cpse	r0, r1
    1090:	d8 f7       	brcc	.-10     	; 0x1088 <strnlen+0x2>
    1092:	80 95       	com	r24
    1094:	90 95       	com	r25
    1096:	8e 0f       	add	r24, r30
    1098:	9f 1f       	adc	r25, r31
    109a:	08 95       	ret

0000109c <fgetc>:
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	ec 01       	movw	r28, r24
    10a2:	2b 81       	ldd	r18, Y+3	; 0x03
    10a4:	20 ff       	sbrs	r18, 0
    10a6:	33 c0       	rjmp	.+102    	; 0x110e <fgetc+0x72>
    10a8:	26 ff       	sbrs	r18, 6
    10aa:	0a c0       	rjmp	.+20     	; 0x10c0 <fgetc+0x24>
    10ac:	2f 7b       	andi	r18, 0xBF	; 191
    10ae:	2b 83       	std	Y+3, r18	; 0x03
    10b0:	8e 81       	ldd	r24, Y+6	; 0x06
    10b2:	9f 81       	ldd	r25, Y+7	; 0x07
    10b4:	01 96       	adiw	r24, 0x01	; 1
    10b6:	9f 83       	std	Y+7, r25	; 0x07
    10b8:	8e 83       	std	Y+6, r24	; 0x06
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	29 c0       	rjmp	.+82     	; 0x1112 <fgetc+0x76>
    10c0:	22 ff       	sbrs	r18, 2
    10c2:	0f c0       	rjmp	.+30     	; 0x10e2 <fgetc+0x46>
    10c4:	e8 81       	ld	r30, Y
    10c6:	f9 81       	ldd	r31, Y+1	; 0x01
    10c8:	80 81       	ld	r24, Z
    10ca:	08 2e       	mov	r0, r24
    10cc:	00 0c       	add	r0, r0
    10ce:	99 0b       	sbc	r25, r25
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	19 f4       	brne	.+6      	; 0x10da <fgetc+0x3e>
    10d4:	20 62       	ori	r18, 0x20	; 32
    10d6:	2b 83       	std	Y+3, r18	; 0x03
    10d8:	1a c0       	rjmp	.+52     	; 0x110e <fgetc+0x72>
    10da:	31 96       	adiw	r30, 0x01	; 1
    10dc:	f9 83       	std	Y+1, r31	; 0x01
    10de:	e8 83       	st	Y, r30
    10e0:	0e c0       	rjmp	.+28     	; 0x10fe <fgetc+0x62>
    10e2:	ea 85       	ldd	r30, Y+10	; 0x0a
    10e4:	fb 85       	ldd	r31, Y+11	; 0x0b
    10e6:	09 95       	icall
    10e8:	97 ff       	sbrs	r25, 7
    10ea:	09 c0       	rjmp	.+18     	; 0x10fe <fgetc+0x62>
    10ec:	2b 81       	ldd	r18, Y+3	; 0x03
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	11 f0       	breq	.+4      	; 0x10f6 <fgetc+0x5a>
    10f2:	80 e2       	ldi	r24, 0x20	; 32
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <fgetc+0x5c>
    10f6:	80 e1       	ldi	r24, 0x10	; 16
    10f8:	82 2b       	or	r24, r18
    10fa:	8b 83       	std	Y+3, r24	; 0x03
    10fc:	08 c0       	rjmp	.+16     	; 0x110e <fgetc+0x72>
    10fe:	2e 81       	ldd	r18, Y+6	; 0x06
    1100:	3f 81       	ldd	r19, Y+7	; 0x07
    1102:	2f 5f       	subi	r18, 0xFF	; 255
    1104:	3f 4f       	sbci	r19, 0xFF	; 255
    1106:	3f 83       	std	Y+7, r19	; 0x07
    1108:	2e 83       	std	Y+6, r18	; 0x06
    110a:	99 27       	eor	r25, r25
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <fgetc+0x76>
    110e:	8f ef       	ldi	r24, 0xFF	; 255
    1110:	9f ef       	ldi	r25, 0xFF	; 255
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	08 95       	ret

00001118 <fputc>:
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	fb 01       	movw	r30, r22
    1122:	23 81       	ldd	r18, Z+3	; 0x03
    1124:	21 fd       	sbrc	r18, 1
    1126:	03 c0       	rjmp	.+6      	; 0x112e <fputc+0x16>
    1128:	8f ef       	ldi	r24, 0xFF	; 255
    112a:	9f ef       	ldi	r25, 0xFF	; 255
    112c:	2c c0       	rjmp	.+88     	; 0x1186 <fputc+0x6e>
    112e:	22 ff       	sbrs	r18, 2
    1130:	16 c0       	rjmp	.+44     	; 0x115e <fputc+0x46>
    1132:	46 81       	ldd	r20, Z+6	; 0x06
    1134:	57 81       	ldd	r21, Z+7	; 0x07
    1136:	24 81       	ldd	r18, Z+4	; 0x04
    1138:	35 81       	ldd	r19, Z+5	; 0x05
    113a:	42 17       	cp	r20, r18
    113c:	53 07       	cpc	r21, r19
    113e:	44 f4       	brge	.+16     	; 0x1150 <fputc+0x38>
    1140:	a0 81       	ld	r26, Z
    1142:	b1 81       	ldd	r27, Z+1	; 0x01
    1144:	9d 01       	movw	r18, r26
    1146:	2f 5f       	subi	r18, 0xFF	; 255
    1148:	3f 4f       	sbci	r19, 0xFF	; 255
    114a:	31 83       	std	Z+1, r19	; 0x01
    114c:	20 83       	st	Z, r18
    114e:	8c 93       	st	X, r24
    1150:	26 81       	ldd	r18, Z+6	; 0x06
    1152:	37 81       	ldd	r19, Z+7	; 0x07
    1154:	2f 5f       	subi	r18, 0xFF	; 255
    1156:	3f 4f       	sbci	r19, 0xFF	; 255
    1158:	37 83       	std	Z+7, r19	; 0x07
    115a:	26 83       	std	Z+6, r18	; 0x06
    115c:	14 c0       	rjmp	.+40     	; 0x1186 <fputc+0x6e>
    115e:	8b 01       	movw	r16, r22
    1160:	ec 01       	movw	r28, r24
    1162:	fb 01       	movw	r30, r22
    1164:	00 84       	ldd	r0, Z+8	; 0x08
    1166:	f1 85       	ldd	r31, Z+9	; 0x09
    1168:	e0 2d       	mov	r30, r0
    116a:	09 95       	icall
    116c:	89 2b       	or	r24, r25
    116e:	e1 f6       	brne	.-72     	; 0x1128 <fputc+0x10>
    1170:	d8 01       	movw	r26, r16
    1172:	16 96       	adiw	r26, 0x06	; 6
    1174:	8d 91       	ld	r24, X+
    1176:	9c 91       	ld	r25, X
    1178:	17 97       	sbiw	r26, 0x07	; 7
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	17 96       	adiw	r26, 0x07	; 7
    117e:	9c 93       	st	X, r25
    1180:	8e 93       	st	-X, r24
    1182:	16 97       	sbiw	r26, 0x06	; 6
    1184:	ce 01       	movw	r24, r28
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	1f 91       	pop	r17
    118c:	0f 91       	pop	r16
    118e:	08 95       	ret

00001190 <ungetc>:
    1190:	fb 01       	movw	r30, r22
    1192:	23 81       	ldd	r18, Z+3	; 0x03
    1194:	20 ff       	sbrs	r18, 0
    1196:	12 c0       	rjmp	.+36     	; 0x11bc <ungetc+0x2c>
    1198:	26 fd       	sbrc	r18, 6
    119a:	10 c0       	rjmp	.+32     	; 0x11bc <ungetc+0x2c>
    119c:	8f 3f       	cpi	r24, 0xFF	; 255
    119e:	3f ef       	ldi	r19, 0xFF	; 255
    11a0:	93 07       	cpc	r25, r19
    11a2:	61 f0       	breq	.+24     	; 0x11bc <ungetc+0x2c>
    11a4:	82 83       	std	Z+2, r24	; 0x02
    11a6:	2f 7d       	andi	r18, 0xDF	; 223
    11a8:	20 64       	ori	r18, 0x40	; 64
    11aa:	23 83       	std	Z+3, r18	; 0x03
    11ac:	26 81       	ldd	r18, Z+6	; 0x06
    11ae:	37 81       	ldd	r19, Z+7	; 0x07
    11b0:	21 50       	subi	r18, 0x01	; 1
    11b2:	31 09       	sbc	r19, r1
    11b4:	37 83       	std	Z+7, r19	; 0x07
    11b6:	26 83       	std	Z+6, r18	; 0x06
    11b8:	99 27       	eor	r25, r25
    11ba:	08 95       	ret
    11bc:	8f ef       	ldi	r24, 0xFF	; 255
    11be:	9f ef       	ldi	r25, 0xFF	; 255
    11c0:	08 95       	ret

000011c2 <__ultoa_invert>:
    11c2:	fa 01       	movw	r30, r20
    11c4:	aa 27       	eor	r26, r26
    11c6:	28 30       	cpi	r18, 0x08	; 8
    11c8:	51 f1       	breq	.+84     	; 0x121e <__ultoa_invert+0x5c>
    11ca:	20 31       	cpi	r18, 0x10	; 16
    11cc:	81 f1       	breq	.+96     	; 0x122e <__ultoa_invert+0x6c>
    11ce:	e8 94       	clt
    11d0:	6f 93       	push	r22
    11d2:	6e 7f       	andi	r22, 0xFE	; 254
    11d4:	6e 5f       	subi	r22, 0xFE	; 254
    11d6:	7f 4f       	sbci	r23, 0xFF	; 255
    11d8:	8f 4f       	sbci	r24, 0xFF	; 255
    11da:	9f 4f       	sbci	r25, 0xFF	; 255
    11dc:	af 4f       	sbci	r26, 0xFF	; 255
    11de:	b1 e0       	ldi	r27, 0x01	; 1
    11e0:	3e d0       	rcall	.+124    	; 0x125e <__ultoa_invert+0x9c>
    11e2:	b4 e0       	ldi	r27, 0x04	; 4
    11e4:	3c d0       	rcall	.+120    	; 0x125e <__ultoa_invert+0x9c>
    11e6:	67 0f       	add	r22, r23
    11e8:	78 1f       	adc	r23, r24
    11ea:	89 1f       	adc	r24, r25
    11ec:	9a 1f       	adc	r25, r26
    11ee:	a1 1d       	adc	r26, r1
    11f0:	68 0f       	add	r22, r24
    11f2:	79 1f       	adc	r23, r25
    11f4:	8a 1f       	adc	r24, r26
    11f6:	91 1d       	adc	r25, r1
    11f8:	a1 1d       	adc	r26, r1
    11fa:	6a 0f       	add	r22, r26
    11fc:	71 1d       	adc	r23, r1
    11fe:	81 1d       	adc	r24, r1
    1200:	91 1d       	adc	r25, r1
    1202:	a1 1d       	adc	r26, r1
    1204:	20 d0       	rcall	.+64     	; 0x1246 <__ultoa_invert+0x84>
    1206:	09 f4       	brne	.+2      	; 0x120a <__ultoa_invert+0x48>
    1208:	68 94       	set
    120a:	3f 91       	pop	r19
    120c:	2a e0       	ldi	r18, 0x0A	; 10
    120e:	26 9f       	mul	r18, r22
    1210:	11 24       	eor	r1, r1
    1212:	30 19       	sub	r19, r0
    1214:	30 5d       	subi	r19, 0xD0	; 208
    1216:	31 93       	st	Z+, r19
    1218:	de f6       	brtc	.-74     	; 0x11d0 <__ultoa_invert+0xe>
    121a:	cf 01       	movw	r24, r30
    121c:	08 95       	ret
    121e:	46 2f       	mov	r20, r22
    1220:	47 70       	andi	r20, 0x07	; 7
    1222:	40 5d       	subi	r20, 0xD0	; 208
    1224:	41 93       	st	Z+, r20
    1226:	b3 e0       	ldi	r27, 0x03	; 3
    1228:	0f d0       	rcall	.+30     	; 0x1248 <__ultoa_invert+0x86>
    122a:	c9 f7       	brne	.-14     	; 0x121e <__ultoa_invert+0x5c>
    122c:	f6 cf       	rjmp	.-20     	; 0x121a <__ultoa_invert+0x58>
    122e:	46 2f       	mov	r20, r22
    1230:	4f 70       	andi	r20, 0x0F	; 15
    1232:	40 5d       	subi	r20, 0xD0	; 208
    1234:	4a 33       	cpi	r20, 0x3A	; 58
    1236:	18 f0       	brcs	.+6      	; 0x123e <__ultoa_invert+0x7c>
    1238:	49 5d       	subi	r20, 0xD9	; 217
    123a:	31 fd       	sbrc	r19, 1
    123c:	40 52       	subi	r20, 0x20	; 32
    123e:	41 93       	st	Z+, r20
    1240:	02 d0       	rcall	.+4      	; 0x1246 <__ultoa_invert+0x84>
    1242:	a9 f7       	brne	.-22     	; 0x122e <__ultoa_invert+0x6c>
    1244:	ea cf       	rjmp	.-44     	; 0x121a <__ultoa_invert+0x58>
    1246:	b4 e0       	ldi	r27, 0x04	; 4
    1248:	a6 95       	lsr	r26
    124a:	97 95       	ror	r25
    124c:	87 95       	ror	r24
    124e:	77 95       	ror	r23
    1250:	67 95       	ror	r22
    1252:	ba 95       	dec	r27
    1254:	c9 f7       	brne	.-14     	; 0x1248 <__ultoa_invert+0x86>
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	61 05       	cpc	r22, r1
    125a:	71 05       	cpc	r23, r1
    125c:	08 95       	ret
    125e:	9b 01       	movw	r18, r22
    1260:	ac 01       	movw	r20, r24
    1262:	0a 2e       	mov	r0, r26
    1264:	06 94       	lsr	r0
    1266:	57 95       	ror	r21
    1268:	47 95       	ror	r20
    126a:	37 95       	ror	r19
    126c:	27 95       	ror	r18
    126e:	ba 95       	dec	r27
    1270:	c9 f7       	brne	.-14     	; 0x1264 <__ultoa_invert+0xa2>
    1272:	62 0f       	add	r22, r18
    1274:	73 1f       	adc	r23, r19
    1276:	84 1f       	adc	r24, r20
    1278:	95 1f       	adc	r25, r21
    127a:	a0 1d       	adc	r26, r0
    127c:	08 95       	ret

0000127e <__ctype_isfalse>:
    127e:	99 27       	eor	r25, r25
    1280:	88 27       	eor	r24, r24

00001282 <__ctype_istrue>:
    1282:	08 95       	ret

00001284 <__prologue_saves__>:
    1284:	2f 92       	push	r2
    1286:	3f 92       	push	r3
    1288:	4f 92       	push	r4
    128a:	5f 92       	push	r5
    128c:	6f 92       	push	r6
    128e:	7f 92       	push	r7
    1290:	8f 92       	push	r8
    1292:	9f 92       	push	r9
    1294:	af 92       	push	r10
    1296:	bf 92       	push	r11
    1298:	cf 92       	push	r12
    129a:	df 92       	push	r13
    129c:	ef 92       	push	r14
    129e:	ff 92       	push	r15
    12a0:	0f 93       	push	r16
    12a2:	1f 93       	push	r17
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	ca 1b       	sub	r28, r26
    12ae:	db 0b       	sbc	r29, r27
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	09 94       	ijmp

000012bc <__epilogue_restores__>:
    12bc:	2a 88       	ldd	r2, Y+18	; 0x12
    12be:	39 88       	ldd	r3, Y+17	; 0x11
    12c0:	48 88       	ldd	r4, Y+16	; 0x10
    12c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    12c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    12c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    12c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    12ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    12cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    12ce:	b9 84       	ldd	r11, Y+9	; 0x09
    12d0:	c8 84       	ldd	r12, Y+8	; 0x08
    12d2:	df 80       	ldd	r13, Y+7	; 0x07
    12d4:	ee 80       	ldd	r14, Y+6	; 0x06
    12d6:	fd 80       	ldd	r15, Y+5	; 0x05
    12d8:	0c 81       	ldd	r16, Y+4	; 0x04
    12da:	1b 81       	ldd	r17, Y+3	; 0x03
    12dc:	aa 81       	ldd	r26, Y+2	; 0x02
    12de:	b9 81       	ldd	r27, Y+1	; 0x01
    12e0:	ce 0f       	add	r28, r30
    12e2:	d1 1d       	adc	r29, r1
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	ed 01       	movw	r28, r26
    12f0:	08 95       	ret

000012f2 <_exit>:
    12f2:	f8 94       	cli

000012f4 <__stop_program>:
    12f4:	ff cf       	rjmp	.-2      	; 0x12f4 <__stop_program>
