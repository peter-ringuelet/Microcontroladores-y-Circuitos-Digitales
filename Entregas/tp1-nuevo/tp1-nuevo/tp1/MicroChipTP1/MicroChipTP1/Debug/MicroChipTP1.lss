
MicroChipTP1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000212  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000212  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000087c  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000741  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000349  00000000  00000000  00001305  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001650  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042c  00000000  00000000  000016b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014c  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001c2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  8e:	0c 94 07 01 	jmp	0x20e	; 0x20e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <cambiar_secuencia>:
	}
}

void cambiar_secuencia(uint8_t* sec) {
	// Cambia la secuencia de forma cíclica entre 1, 2 y 3
	if (*sec == 1) {
  96:	fc 01       	movw	r30, r24
  98:	20 81       	ld	r18, Z
  9a:	21 30       	cpi	r18, 0x01	; 1
  9c:	19 f4       	brne	.+6      	; 0xa4 <cambiar_secuencia+0xe>
		*sec = 2;
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	20 83       	st	Z, r18
  a2:	08 95       	ret
		} else if (*sec == 2) {
  a4:	22 30       	cpi	r18, 0x02	; 2
  a6:	21 f4       	brne	.+8      	; 0xb0 <cambiar_secuencia+0x1a>
		*sec = 3;
  a8:	23 e0       	ldi	r18, 0x03	; 3
  aa:	fc 01       	movw	r30, r24
  ac:	20 83       	st	Z, r18
  ae:	08 95       	ret
		} else {
		*sec = 1;
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	fc 01       	movw	r30, r24
  b4:	20 83       	st	Z, r18
  b6:	08 95       	ret

000000b8 <mostrar_numero>:
	}
}

void mostrar_numero(uint8_t sec) {
	// Enciende PB3 y/o PB4 según el número de secuencia actual
	if (sec == 1) {
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	21 f4       	brne	.+8      	; 0xc4 <mostrar_numero+0xc>
		PORTB |= (1 << PORTB3);           // 01
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	85 b9       	out	0x05, r24	; 5
  c2:	08 95       	ret
		} else if (sec == 2) {
  c4:	82 30       	cpi	r24, 0x02	; 2
  c6:	21 f4       	brne	.+8      	; 0xd0 <mostrar_numero+0x18>
		PORTB |= (1 << PORTB4);           // 10
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	08 95       	ret
		} else {
		PORTB |= (1 << PORTB3) | (1 << PORTB4); // 11
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	08 95       	ret

000000d8 <actualizar_secuencia>:
	}
}

void actualizar_secuencia(uint8_t num_sec, uint8_t* i) {
  d8:	fb 01       	movw	r30, r22
	// Muestra la combinación correspondiente en PORTD según la secuencia actual
	// y avanza el índice circularmente
	if (num_sec == 1) {
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	99 f4       	brne	.+38     	; 0x104 <actualizar_secuencia+0x2c>
		PORTD = sec_1[*i];
  de:	a0 81       	ld	r26, Z
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	a9 5e       	subi	r26, 0xE9	; 233
  e4:	be 4f       	sbci	r27, 0xFE	; 254
  e6:	8c 91       	ld	r24, X
  e8:	8b b9       	out	0x0b, r24	; 11
		*i = (*i + 1) % 2;
  ea:	80 81       	ld	r24, Z
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	81 70       	andi	r24, 0x01	; 1
  f2:	90 78       	andi	r25, 0x80	; 128
  f4:	99 23       	and	r25, r25
  f6:	24 f4       	brge	.+8      	; 0x100 <actualizar_secuencia+0x28>
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	8e 6f       	ori	r24, 0xFE	; 254
  fc:	9f 6f       	ori	r25, 0xFF	; 255
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	80 83       	st	Z, r24
 102:	08 95       	ret
		} else if (num_sec == 2) {
 104:	82 30       	cpi	r24, 0x02	; 2
 106:	99 f4       	brne	.+38     	; 0x12e <actualizar_secuencia+0x56>
		PORTD = sec_2[*i];
 108:	a0 81       	ld	r26, Z
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	a1 5f       	subi	r26, 0xF1	; 241
 10e:	be 4f       	sbci	r27, 0xFE	; 254
 110:	8c 91       	ld	r24, X
 112:	8b b9       	out	0x0b, r24	; 11
		*i = (*i + 1) % 8;
 114:	80 81       	ld	r24, Z
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	87 70       	andi	r24, 0x07	; 7
 11c:	90 78       	andi	r25, 0x80	; 128
 11e:	99 23       	and	r25, r25
 120:	24 f4       	brge	.+8      	; 0x12a <actualizar_secuencia+0x52>
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	88 6f       	ori	r24, 0xF8	; 248
 126:	9f 6f       	ori	r25, 0xFF	; 255
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	80 83       	st	Z, r24
 12c:	08 95       	ret
		} else {
		PORTD = sec3[*i];
 12e:	a0 81       	ld	r26, Z
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	a0 50       	subi	r26, 0x00	; 0
 134:	bf 4f       	sbci	r27, 0xFF	; 255
 136:	8c 91       	ld	r24, X
 138:	8b b9       	out	0x0b, r24	; 11
		*i = (*i + 1) % 15;
 13a:	80 81       	ld	r24, Z
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	6f e0       	ldi	r22, 0x0F	; 15
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	0e 94 df 00 	call	0x1be	; 0x1be <__divmodhi4>
 148:	80 83       	st	Z, r24
 14a:	08 95       	ret

0000014c <main>:
	0b00100000,
	0b01000000,
	0b10000000
};

int main(void) {
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	00 d0       	rcall	.+0      	; 0x152 <main+0x6>
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
	uint8_t num_sec = 1; // Número de secuencia actual; comienza en 1 como indica la consigna
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	89 83       	std	Y+1, r24	; 0x01
	uint8_t i = 0;       // Índice para recorrer los vectores de secuencias
 15a:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t aux = 0;     // Bandera para detectar el momento en que se suelta el botón

	DDRD = 0xFF; // Puerto D como salida para los LEDs
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << PORTB3) | (1 << PORTB4); // Pines PB3 y PB4 como salida para mostrar el número de secuencia
 160:	84 b1       	in	r24, 0x04	; 4
 162:	88 61       	ori	r24, 0x18	; 24
 164:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~((1 << PORTC0) | (1 << PORTC1)); // Pines PC0 y PC1 como entrada
 166:	87 b1       	in	r24, 0x07	; 7
 168:	8c 7f       	andi	r24, 0xFC	; 252
 16a:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC0) | (1 << PORTC1);   // Activar resistencias pull-up internas en PC0 y PC1
 16c:	88 b1       	in	r24, 0x08	; 8
 16e:	83 60       	ori	r24, 0x03	; 3
 170:	88 b9       	out	0x08, r24	; 8
};

int main(void) {
	uint8_t num_sec = 1; // Número de secuencia actual; comienza en 1 como indica la consigna
	uint8_t i = 0;       // Índice para recorrer los vectores de secuencias
	uint8_t aux = 0;     // Bandera para detectar el momento en que se suelta el botón
 172:	10 e0       	ldi	r17, 0x00	; 0
	DDRC &= ~((1 << PORTC0) | (1 << PORTC1)); // Pines PC0 y PC1 como entrada
	PORTC |= (1 << PORTC0) | (1 << PORTC1);   // Activar resistencias pull-up internas en PC0 y PC1

	while (1) {
		// Detectar si se presiona el botón de cambio de secuencia (PC0)
		if (!(PINC & (1 << PINC0))) {
 174:	30 9b       	sbis	0x06, 0	; 6
			aux = 1; // Si se presiona el botón, activamos la bandera
 176:	11 e0       	ldi	r17, 0x01	; 1
		}

		// Si la bandera está activada y el botón fue soltado, cambiamos la secuencia
		if (aux) {
 178:	11 23       	and	r17, r17
 17a:	41 f0       	breq	.+16     	; 0x18c <main+0x40>
			if ((PINC & (1 << PINC0))) {
 17c:	30 9b       	sbis	0x06, 0	; 6
 17e:	06 c0       	rjmp	.+12     	; 0x18c <main+0x40>
				cambiar_secuencia(&num_sec); // Cambiar a la siguiente secuencia
 180:	ce 01       	movw	r24, r28
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	0e 94 4b 00 	call	0x96	; 0x96 <cambiar_secuencia>
				i = 0;     // Reiniciar el índice para comenzar la nueva secuencia desde el principio
 188:	1a 82       	std	Y+2, r1	; 0x02
				aux = 0;   // Limpiar la bandera
 18a:	10 e0       	ldi	r17, 0x00	; 0
			}
		}

		// Mostrar el número de la secuencia actual si se presiona PC1
		if (!(PINC & (1 << PINC1))) {
 18c:	31 99       	sbic	0x06, 1	; 6
 18e:	04 c0       	rjmp	.+8      	; 0x198 <main+0x4c>
			mostrar_numero(num_sec);
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	0e 94 5c 00 	call	0xb8	; 0xb8 <mostrar_numero>
 196:	03 c0       	rjmp	.+6      	; 0x19e <main+0x52>
			} else {
			PORTB &= ~((1 << PORTB3) | (1 << PORTB4)); // Apagar los indicadores si no se presiona
 198:	85 b1       	in	r24, 0x05	; 5
 19a:	87 7e       	andi	r24, 0xE7	; 231
 19c:	85 b9       	out	0x05, r24	; 5
		}
		
		actualizar_secuencia(num_sec, &i); // Mostrar el paso actual de la secuencia y actualizar el índice
 19e:	be 01       	movw	r22, r28
 1a0:	6e 5f       	subi	r22, 0xFE	; 254
 1a2:	7f 4f       	sbci	r23, 0xFF	; 255
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	0e 94 6c 00 	call	0xd8	; 0xd8 <actualizar_secuencia>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	2f ef       	ldi	r18, 0xFF	; 255
 1ac:	81 ee       	ldi	r24, 0xE1	; 225
 1ae:	94 e0       	ldi	r25, 0x04	; 4
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <main+0x64>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x6e>
 1ba:	00 00       	nop
 1bc:	db cf       	rjmp	.-74     	; 0x174 <main+0x28>

000001be <__divmodhi4>:
 1be:	97 fb       	bst	r25, 7
 1c0:	07 2e       	mov	r0, r23
 1c2:	16 f4       	brtc	.+4      	; 0x1c8 <__divmodhi4+0xa>
 1c4:	00 94       	com	r0
 1c6:	07 d0       	rcall	.+14     	; 0x1d6 <__divmodhi4_neg1>
 1c8:	77 fd       	sbrc	r23, 7
 1ca:	09 d0       	rcall	.+18     	; 0x1de <__divmodhi4_neg2>
 1cc:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <__udivmodhi4>
 1d0:	07 fc       	sbrc	r0, 7
 1d2:	05 d0       	rcall	.+10     	; 0x1de <__divmodhi4_neg2>
 1d4:	3e f4       	brtc	.+14     	; 0x1e4 <__divmodhi4_exit>

000001d6 <__divmodhi4_neg1>:
 1d6:	90 95       	com	r25
 1d8:	81 95       	neg	r24
 1da:	9f 4f       	sbci	r25, 0xFF	; 255
 1dc:	08 95       	ret

000001de <__divmodhi4_neg2>:
 1de:	70 95       	com	r23
 1e0:	61 95       	neg	r22
 1e2:	7f 4f       	sbci	r23, 0xFF	; 255

000001e4 <__divmodhi4_exit>:
 1e4:	08 95       	ret

000001e6 <__udivmodhi4>:
 1e6:	aa 1b       	sub	r26, r26
 1e8:	bb 1b       	sub	r27, r27
 1ea:	51 e1       	ldi	r21, 0x11	; 17
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <__udivmodhi4_ep>

000001ee <__udivmodhi4_loop>:
 1ee:	aa 1f       	adc	r26, r26
 1f0:	bb 1f       	adc	r27, r27
 1f2:	a6 17       	cp	r26, r22
 1f4:	b7 07       	cpc	r27, r23
 1f6:	10 f0       	brcs	.+4      	; 0x1fc <__udivmodhi4_ep>
 1f8:	a6 1b       	sub	r26, r22
 1fa:	b7 0b       	sbc	r27, r23

000001fc <__udivmodhi4_ep>:
 1fc:	88 1f       	adc	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	5a 95       	dec	r21
 202:	a9 f7       	brne	.-22     	; 0x1ee <__udivmodhi4_loop>
 204:	80 95       	com	r24
 206:	90 95       	com	r25
 208:	bc 01       	movw	r22, r24
 20a:	cd 01       	movw	r24, r26
 20c:	08 95       	ret

0000020e <_exit>:
 20e:	f8 94       	cli

00000210 <__stop_program>:
 210:	ff cf       	rjmp	.-2      	; 0x210 <__stop_program>
